<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MonoGame.Framework.Content.Pipeline</name>
    </assembly>
    <members>
        <member name="T:Microsoft.Xna.Framework.Content.Pipeline.Audio.AudioContent">
             <summary>
             Encapsulates and provides operations, such as format conversions, on the 
             source audio. This type is produced by the audio importers and used by audio
             processors to produce compiled audio assets.
             </summary>
             <remarks>Note that AudioContent can load and process audio files that are not supported by the importers.</remarks>
            </member>
        <member name="P:Microsoft.Xna.Framework.Content.Pipeline.Audio.AudioContent.FileName">
             <summary>
             The name of the original source audio file.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Content.Pipeline.Audio.AudioContent.FileType">
             <summary>
             The type of the original source audio file.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Content.Pipeline.Audio.AudioContent.Data">
             <summary>
             The current raw audio data without header information.
             </summary>
             <remarks>
             This changes from the source data to the output data after conversion.
             For MP3 and WMA files this throws an exception to match XNA behavior.
             </remarks>
            </member>
        <member name="P:Microsoft.Xna.Framework.Content.Pipeline.Audio.AudioContent.Duration">
             <summary>
             The duration of the audio data.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Content.Pipeline.Audio.AudioContent.Format">
             <summary>
             The current format of the audio data.
             </summary>
             <remarks>This changes from the source format to the output format after conversion.</remarks>
            </member>
        <member name="P:Microsoft.Xna.Framework.Content.Pipeline.Audio.AudioContent.LoopLength">
             <summary>
             The current loop length in samples.
             </summary>
             <remarks>This changes from the source loop length to the output loop length after conversion.</remarks>
            </member>
        <member name="P:Microsoft.Xna.Framework.Content.Pipeline.Audio.AudioContent.LoopStart">
             <summary>
             The current loop start location in samples.
             </summary>
             <remarks>This changes from the source loop start to the output loop start after conversion.</remarks>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Audio.AudioContent.#ctor(System.String,Microsoft.Xna.Framework.Content.Pipeline.Audio.AudioFileType)">
             <summary>
             Initializes a new instance of AudioContent.
             </summary>
             <param name="audioFileName">Name of the audio source file to be processed.</param>
             <param name="audioFileType">Type of the processed audio: WAV, MP3 or WMA.</param>
             <remarks>Constructs the object from the specified source file, in the format specified.</remarks>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Audio.AudioContent.ConvertFormat(Microsoft.Xna.Framework.Content.Pipeline.Audio.ConversionFormat,Microsoft.Xna.Framework.Content.Pipeline.Audio.ConversionQuality,System.String)">
             <summary>
             Transcodes the source audio to the target format and quality.
             </summary>
             <param name="formatType">Format to convert this audio to.</param>
             <param name="quality">Quality of the processed output audio. For streaming formats, it can be one of the following: Low (96 kbps), Medium (128 kbps), Best (192 kbps).  For WAV formats, it can be one of the following: Low (11kHz ADPCM), Medium (22kHz ADPCM), Best (44kHz PCM)</param>
             <param name="saveToFile">
             The name of the file that the converted audio should be saved into.  This is used for SongContent, where
             the audio is stored external to the XNB file.  If this is null, then the converted audio is stored in
             the Data property.
             </param>
            </member>
        <member name="T:Microsoft.Xna.Framework.Content.Pipeline.Audio.AudioFileType">
             <summary>
             Type of the audio file.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Content.Pipeline.Audio.AudioFileType.Mp3">
             <summary>
             The MP3 format
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Content.Pipeline.Audio.AudioFileType.Wav">
             <summary>
             The WAV format
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Content.Pipeline.Audio.AudioFileType.Wma">
             <summary>
             The WMA format
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Content.Pipeline.Audio.AudioFileType.Ogg">
             <summary>
             The Ogg format
             </summary>
            </member>
        <member name="T:Microsoft.Xna.Framework.Content.Pipeline.Audio.AudioFormat">
             <summary>
             Encapsulates the native audio format (WAVEFORMATEX) information of the audio content.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Content.Pipeline.Audio.AudioFormat.AverageBytesPerSecond">
             <summary>
             Gets the average bytes processed per second.
             </summary>
             <value>Average bytes processed per second.</value>
            </member>
        <member name="P:Microsoft.Xna.Framework.Content.Pipeline.Audio.AudioFormat.BitsPerSample">
             <summary>
             Gets the bit depth of the audio content.
             </summary>
             <value>If the audio has not been processed, the source bit depth; otherwise, the bit depth of the new format.</value>
            </member>
        <member name="P:Microsoft.Xna.Framework.Content.Pipeline.Audio.AudioFormat.BlockAlign">
             <summary>
             Gets the number of bytes per sample block, taking channels into consideration. For example, for 16-bit stereo audio (PCM format), the size of each sample block is 4 bytes.
             </summary>
             <value>Number of bytes, per sample block.</value>
            </member>
        <member name="P:Microsoft.Xna.Framework.Content.Pipeline.Audio.AudioFormat.ChannelCount">
             <summary>
             Gets the number of channels.
             </summary>
             <value>If the audio has not been processed, the source channel count; otherwise, the new channel count.</value>
            </member>
        <member name="P:Microsoft.Xna.Framework.Content.Pipeline.Audio.AudioFormat.Format">
             <summary>
             Gets the format of the audio content.
             </summary>
             <value>If the audio has not been processed, the format tag of the source content; otherwise, the new format tag.</value>
            </member>
        <member name="P:Microsoft.Xna.Framework.Content.Pipeline.Audio.AudioFormat.NativeWaveFormat">
             <summary>
             Gets the raw byte buffer for the format. For non-PCM formats, this buffer contains important format-specific information beyond the basic format information exposed in other properties of the AudioFormat type.
             </summary>
             <value>The raw byte buffer represented in a collection.</value>
            </member>
        <member name="P:Microsoft.Xna.Framework.Content.Pipeline.Audio.AudioFormat.SampleRate">
             <summary>
             Gets the sample rate of the audio content.
             </summary>
             <value>If the audio has not been processed, the source sample rate; otherwise, the new sample rate.</value>
            </member>
        <member name="T:Microsoft.Xna.Framework.Content.Pipeline.Audio.AudioHelper">
             <summary>
             Helper methods for audio importing, conversion and processing.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Audio.AudioHelper.GetExtension(Microsoft.Xna.Framework.Content.Pipeline.Audio.ConversionFormat)">
             <summary>
             Gets the file extension for an audio format.
             </summary>
             <param name="format">The conversion format</param>
             <returns>The file extension for the given conversion format.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Audio.AudioProfile.ForPlatform(Microsoft.Xna.Framework.Content.Pipeline.TargetPlatform)">
             <summary>
             Find the profile for this target platform.
             </summary>
             <param name="platform">The platform target for audio.</param>
             <returns></returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Audio.AudioProfile.Supports(Microsoft.Xna.Framework.Content.Pipeline.TargetPlatform)">
             <summary>
             Returns true if this profile supports audio processing for this platform.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Audio.AudioProfile.ConvertAudio(Microsoft.Xna.Framework.Content.Pipeline.TargetPlatform,Microsoft.Xna.Framework.Content.Pipeline.Audio.ConversionQuality,Microsoft.Xna.Framework.Content.Pipeline.Audio.AudioContent)">
             <summary>
             Converts the audio content to work on targeted platform.
             </summary>
             <param name="platform">The platform to build the audio content for.</param>
             <param name="quality">The suggested audio quality level.</param>
             <param name="content">The audio content to convert.</param>
             <returns>The quality used for conversion which could be different from the suggested quality.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Audio.AudioProfile.ConvertStreamingAudio(Microsoft.Xna.Framework.Content.Pipeline.TargetPlatform,Microsoft.Xna.Framework.Content.Pipeline.Audio.ConversionQuality,Microsoft.Xna.Framework.Content.Pipeline.Audio.AudioContent,System.String@)">
             <summary>
             Converts the audio content to a streaming format that works on targeted platform.
             </summary>
             <param name="platform">The platform to build the audio content for.</param>
             <param name="quality">The suggested audio quality level.</param>
             <param name="content">he audio content to convert.</param>
             <param name="outputFileName"></param>
             <returns>The quality used for conversion which could be different from the suggested quality.</returns>
            </member>
        <member name="T:Microsoft.Xna.Framework.Content.Pipeline.Audio.ConversionFormat">
             <summary>
             Target formats supported for audio source conversions.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Content.Pipeline.Audio.ConversionFormat.Adpcm">
             <summary>
             Microsoft ADPCM encoding technique using 4 bits
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Content.Pipeline.Audio.ConversionFormat.Pcm">
             <summary>
             8/16-bit mono/stereo PCM audio 8KHz-48KHz
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Content.Pipeline.Audio.ConversionFormat.WindowsMedia">
             <summary>
             Windows Media CBR formats (64 kbps, 128 kbps, 192 kbps)
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Content.Pipeline.Audio.ConversionFormat.Xma">
             <summary>
             The Xbox compression format
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Content.Pipeline.Audio.ConversionFormat.ImaAdpcm">
             <summary>
             QuickTime ADPCM format
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Content.Pipeline.Audio.ConversionFormat.Aac">
             <summary>
             Advanced Audio Coding
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Content.Pipeline.Audio.ConversionFormat.Vorbis">
             <summary>
             Vorbis open, patent-free audio encoding
             </summary>
            </member>
        <member name="T:Microsoft.Xna.Framework.Content.Pipeline.Audio.ConversionQuality">
             <summary>
             Compression quality of the audio content.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Content.Pipeline.Audio.ConversionQuality.Low">
             <summary>
             High compression yielding lower file size, but could compromise audio quality
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Content.Pipeline.Audio.ConversionQuality.Medium">
             <summary>
             Moderate compression resulting in a compromise between audio quality and file size
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Content.Pipeline.Audio.ConversionQuality.Best">
             <summary>
             Lowest compression, but the best audio quality
             </summary>
            </member>
        <member name="M:MonoGame.Framework.Content.Pipeline.Builder.FileHelper.DeleteIfExists(System.String)">
             <summary>
             Checks  deletes a file from disk without throwing exceptions.
             </summary>
            </member>
        <member name="F:MonoGame.Framework.Content.Pipeline.Builder.PathHelper.DirectorySeparator">
             <summary>
             The/universal/standard/directory/seperator.
             </summary>
            </member>
        <member name="M:MonoGame.Framework.Content.Pipeline.Builder.PathHelper.Normalize(System.String)">
             <summary>
             Returns a path string normalized to the/universal/standard.
             </summary>
            </member>
        <member name="M:MonoGame.Framework.Content.Pipeline.Builder.PathHelper.NormalizeDirectory(System.String)">
             <summary>
             Returns a directory path string normalized to the/universal/standard
             with a trailing seperator.
             </summary>
            </member>
        <member name="M:MonoGame.Framework.Content.Pipeline.Builder.PathHelper.NormalizeWindows(System.String)">
             <summary>
             Returns a path string normalized to the\Windows\standard.
             </summary>
            </member>
        <member name="M:MonoGame.Framework.Content.Pipeline.Builder.PathHelper.GetRelativePath(System.String,System.String)">
             <summary>
             Returns a path relative to the base path.
             </summary>
             <param name="basePath">The path to make relative to.  Must end with directory seperator.</param>
             <param name="path">The path to be made relative to the basePath.</param>
             <returns>The relative path or the original string if it is not absolute or cannot be made relative.</returns>
            </member>
        <member name="P:MonoGame.Framework.Content.Pipeline.Builder.PipelineBuildEvent.SourceFile">
             <summary>
             Absolute path to the source file.
             </summary>
            </member>
        <member name="P:MonoGame.Framework.Content.Pipeline.Builder.PipelineBuildEvent.SourceTime">
             <summary>
             The date/time stamp of the source file.
             </summary>
            </member>
        <member name="P:MonoGame.Framework.Content.Pipeline.Builder.PipelineBuildEvent.DestFile">
             <summary>
             Absolute path to the output file.
             </summary>
            </member>
        <member name="P:MonoGame.Framework.Content.Pipeline.Builder.PipelineBuildEvent.DestTime">
             <summary>
             The date/time stamp of the destination file.
             </summary>
            </member>
        <member name="P:MonoGame.Framework.Content.Pipeline.Builder.PipelineBuildEvent.ImporterTime">
             <summary>
             The date/time stamp of the DLL containing the importer.
             </summary>
            </member>
        <member name="P:MonoGame.Framework.Content.Pipeline.Builder.PipelineBuildEvent.ProcessorTime">
             <summary>
             The date/time stamp of the DLL containing the processor.
             </summary>
            </member>
        <member name="P:MonoGame.Framework.Content.Pipeline.Builder.PipelineBuildEvent.Dependencies">
             <summary>
             Gets or sets the dependencies.
             </summary>
             <value>The dependencies.</value>
             <remarks>
             Dependencies are extra files that are required in addition to the <see cref="P:MonoGame.Framework.Content.Pipeline.Builder.PipelineBuildEvent.SourceFile" />.
             Dependencies are added using <see cref="M:Microsoft.Xna.Framework.Content.Pipeline.ContentProcessorContext.AddDependency(System.String)" />. Changes
             to the dependent file causes a rebuilt of the content.
             </remarks>
            </member>
        <member name="P:MonoGame.Framework.Content.Pipeline.Builder.PipelineBuildEvent.BuildAsset">
             <summary>
             Gets or sets the additional (nested) assets.
             </summary>
             <value>The additional (nested) assets.</value>
             <remarks>
             <para>
             Additional assets are built by using an <see cref="T:Microsoft.Xna.Framework.Content.Pipeline.ExternalReference`1" /> and calling
             <see cref="M:Microsoft.Xna.Framework.Content.Pipeline.ContentProcessorContext.BuildAndLoadAsset``2(Microsoft.Xna.Framework.Content.Pipeline.ExternalReference{``0},System.String)" />
             or <see cref="M:Microsoft.Xna.Framework.Content.Pipeline.ContentProcessorContext.BuildAsset``2(Microsoft.Xna.Framework.Content.Pipeline.ExternalReference{``0},System.String)" />.
             </para>
             <para>
             Examples: The mesh processor may build textures and effects in addition to the mesh.
             </para>
             </remarks>
            </member>
        <member name="P:MonoGame.Framework.Content.Pipeline.Builder.PipelineBuildEvent.BuildOutput">
             <summary>
             Gets or sets the related output files.
             </summary>
             <value>The related output files.</value>
             <remarks>
             Related output files are non-XNB files that are included in addition to the XNB files.
             Related output files need to be copied to the output folder by a content processor and
             registered by calling <see cref="M:Microsoft.Xna.Framework.Content.Pipeline.ContentProcessorContext.AddOutputFile(System.String)" />.
             </remarks>
            </member>
        <member name="P:MonoGame.Framework.Content.Pipeline.Builder.PipelineManager.Profile">
             <summary>
             The current target graphics profile for which all content is built.
             </summary>
            </member>
        <member name="P:MonoGame.Framework.Content.Pipeline.Builder.PipelineManager.Platform">
             <summary>
             The current target platform for which all content is built.
             </summary>
            </member>
        <member name="P:MonoGame.Framework.Content.Pipeline.Builder.PipelineManager.Config">
             <summary>
             The build configuration passed thru to content processors.
             </summary>
            </member>
        <member name="P:MonoGame.Framework.Content.Pipeline.Builder.PipelineManager.CompressContent">
             <summary>
             Gets or sets if the content is compressed.
             </summary>
            </member>
        <member name="P:MonoGame.Framework.Content.Pipeline.Builder.PipelineManager.RethrowExceptions">
             <summary>        
             If true exceptions thrown from within an importer or processor are caught and then 
             thrown from the context. Default value is true.
             </summary>
            </member>
        <member name="M:MonoGame.Framework.Content.Pipeline.Builder.PipelineManager.GetProcessorDefaultValues(System.String)">
             <summary>
             Gets the default values for the content processor parameters.
             </summary>
             <param name="processorName">The name of the content processor.</param>
             <returns>
             A dictionary containing the default value for each parameter. Returns
             <see langword="null" /> if the content processor has not been created yet.
             </returns>
            </member>
        <member name="M:MonoGame.Framework.Content.Pipeline.Builder.PipelineManager.TrackPipelineBuildEvent(MonoGame.Framework.Content.Pipeline.Builder.PipelineBuildEvent)">
             <summary>
             Stores the pipeline build event (in memory) if no matching event is found.
             </summary>
             <param name="pipelineEvent">The pipeline build event.</param>
            </member>
        <member name="M:MonoGame.Framework.Content.Pipeline.Builder.PipelineManager.GetAssetName(System.String,System.String,System.String,Microsoft.Xna.Framework.Content.Pipeline.OpaqueDataDictionary)">
             <summary>
             Gets an automatic asset name, such as "AssetName_0".
             </summary>
             <param name="sourceFileName">The source file name.</param>
             <param name="importerName">The name of the content importer. Can be <see langword="null" />.</param>
             <param name="processorName">The name of the content processor. Can be <see langword="null" />.</param>
             <param name="processorParameters">The processor parameters. Can be <see langword="null" />.</param>
             <returns>The asset name.</returns>
            </member>
        <member name="M:MonoGame.Framework.Content.Pipeline.Builder.PipelineManager.FindMatchingEvent(System.Collections.Generic.List{MonoGame.Framework.Content.Pipeline.Builder.PipelineBuildEvent},System.String,System.String,System.String,Microsoft.Xna.Framework.Content.Pipeline.OpaqueDataDictionary)">
             <summary>
             Determines whether the specified list contains a matching pipeline build event.
             </summary>
             <param name="pipelineBuildEvents">The list of pipeline build events.</param>
             <param name="destFile">Absolute path to the output file. Can be <see langword="null" />.</param>
             <param name="importerName">The name of the content importer. Can be <see langword="null" />.</param>
             <param name="processorName">The name of the content processor. Can be <see langword="null" />.</param>
             <param name="processorParameters">The processor parameters. Can be <see langword="null" />.</param>
             <returns>
             The matching pipeline build event, or <see langword="null" />.
             </returns>
            </member>
        <member name="M:MonoGame.Framework.Content.Pipeline.Builder.PipelineManager.AppendAssetNameSuffix(System.String)">
             <summary>
             Gets the asset name including a suffix, such as "_0". (The number is incremented
             automatically.
             </summary>
             <param name="baseAssetName">
             The asset name without suffix (relative to output folder).
             </param>
             <returns>The asset name with suffix.</returns>
            </member>
        <member name="M:MonoGame.Framework.Content.Pipeline.Builder.PipelineManager.IsAssetNameUsed(System.String)">
             <summary>
             Determines whether the specified asset name is already used.
             </summary>
             <param name="assetName">The asset name (relative to output folder).</param>
             <returns>
             <see langword="true" /> if the asset name is already used; otherwise,
             <see langword="false" /> if the name is available.
             </returns>
            </member>
        <member name="T:MonoGame.Framework.Content.Pipeline.Builder.XmlColor">
             <summary>
             Helper for serializing color types with the XmlSerializer.
             </summary>
            </member>
        <member name="T:Microsoft.Xna.Framework.Content.Pipeline.Graphics.AnimationChannel">
             <summary>
             Provides methods and properties for maintaining an animation channel. An animation channel is a collection of keyframes describing the movement of a single bone or rigid object.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Content.Pipeline.Graphics.AnimationChannel.Count">
             <summary>
             Gets the number of keyframes in the collection.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Content.Pipeline.Graphics.AnimationChannel.Item(System.Int32)">
             <summary>
             Gets the keyframe at the specified index position.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Content.Pipeline.Graphics.AnimationChannel.System#Collections#Generic#ICollection{Microsoft#Xna#Framework#Content#Pipeline#Graphics#AnimationKeyframe}#IsReadOnly">
             <summary>
             Returns a value indicating whether the object is read-only.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.AnimationChannel.#ctor">
             <summary>
             Initializes a new instance of AnimationChannel.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.AnimationChannel.System#Collections#Generic#ICollection{Microsoft#Xna#Framework#Content#Pipeline#Graphics#AnimationKeyframe}#Add(Microsoft.Xna.Framework.Content.Pipeline.Graphics.AnimationKeyframe)">
             <summary>
             To satisfy ICollection
             </summary>
             <param name="item"></param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.AnimationChannel.Add(Microsoft.Xna.Framework.Content.Pipeline.Graphics.AnimationKeyframe)">
             <summary>
             Adds a new keyframe to the collection, automatically sorting the contents according to keyframe times.
             </summary>
             <param name="item">Keyframe to be added to the channel.</param>
             <returns>Index of the new keyframe.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.AnimationChannel.Clear">
             <summary>
             Removes all keyframes from the collection.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.AnimationChannel.Contains(Microsoft.Xna.Framework.Content.Pipeline.Graphics.AnimationKeyframe)">
             <summary>
             Searches the collection for the specified keyframe.
             </summary>
             <param name="item">Keyframe being searched for.</param>
             <returns>true if the keyframe exists; false otherwise.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.AnimationChannel.System#Collections#Generic#ICollection{Microsoft#Xna#Framework#Content#Pipeline#Graphics#AnimationKeyframe}#CopyTo(Microsoft.Xna.Framework.Content.Pipeline.Graphics.AnimationKeyframe[],System.Int32)">
             <summary>
             To satisfy ICollection
             </summary>
             <param name="array"></param>
             <param name="arrayIndex"></param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.AnimationChannel.IndexOf(Microsoft.Xna.Framework.Content.Pipeline.Graphics.AnimationKeyframe)">
             <summary>
             Determines the index for the specified keyframe.
             </summary>
             <param name="item">Identity of a keyframe.</param>
             <returns>Index of the specified keyframe.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.AnimationChannel.Remove(Microsoft.Xna.Framework.Content.Pipeline.Graphics.AnimationKeyframe)">
             <summary>
             Removes the specified keyframe from the collection.
             </summary>
             <param name="item">Keyframe being removed.</param>
             <returns>true if the keyframe was removed; false otherwise.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.AnimationChannel.RemoveAt(System.Int32)">
             <summary>
             Removes the keyframe at the specified index position.
             </summary>
             <param name="index">Index of the keyframe being removed.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.AnimationChannel.GetEnumerator">
             <summary>
             Returns an enumerator that iterates through the keyframes.
             </summary>
             <returns>Enumerator for the keyframe collection.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.AnimationChannel.System#Collections#IEnumerable#GetEnumerator">
             <summary>
             To satisfy ICollection
             </summary>
             <returns></returns>
            </member>
        <member name="T:Microsoft.Xna.Framework.Content.Pipeline.Graphics.AnimationChannelDictionary">
             <summary>
             Collection of animation data channels, one per bone or rigid object.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.AnimationChannelDictionary.#ctor">
             <summary>
             Initializes a new instance of AnimationChannelDictionary.
             </summary>
            </member>
        <member name="T:Microsoft.Xna.Framework.Content.Pipeline.Graphics.AnimationContent">
             <summary>
             Provides properties for maintaining an animation.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Content.Pipeline.Graphics.AnimationContent.Channels">
             <summary>
             Gets the collection of animation data channels. Each channel describes the movement of a single bone or rigid object.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Content.Pipeline.Graphics.AnimationContent.Duration">
             <summary>
             Gets or sets the total length of the animation.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.AnimationContent.#ctor">
             <summary>
             Initializes a new instance of AnimationContent.
             </summary>
            </member>
        <member name="T:Microsoft.Xna.Framework.Content.Pipeline.Graphics.AnimationContentDictionary">
             <summary>
             Collection of named animations.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.AnimationContentDictionary.#ctor">
             <summary>
             Initializes a new instance of AnimationContentDictionary.
             </summary>
            </member>
        <member name="T:Microsoft.Xna.Framework.Content.Pipeline.Graphics.AnimationKeyframe">
             <summary>
             Provides methods and properties for managing a keyframe. A keyframe describes the position of an animation channel at a single point in time.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Content.Pipeline.Graphics.AnimationKeyframe.Time">
             <summary>
             Gets the time offset from the start of the animation to the position described by this keyframe.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Content.Pipeline.Graphics.AnimationKeyframe.Transform">
             <summary>
             Gets or sets the position described by this keyframe.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.AnimationKeyframe.#ctor(System.TimeSpan,Microsoft.Xna.Framework.Matrix)">
             <summary>
             Initializes a new instance of AnimationKeyframe with the specified time offsetand transform.
             </summary>
             <param name="time">Time offset of the keyframe.</param>
             <param name="transform">Position of the keyframe.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.AnimationKeyframe.CompareTo(Microsoft.Xna.Framework.Content.Pipeline.Graphics.AnimationKeyframe)">
             <summary>
             Compares this instance of a keyframe to another.
             </summary>
             <param name="other">Keyframe being compared to.</param>
             <returns>Indication of their relative values.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.AtcExplicitBitmapContent.#ctor">
             <summary>
             Creates an instance of AtcExplicitBitmapContent.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.AtcExplicitBitmapContent.#ctor(System.Int32,System.Int32)">
             <summary>
             Creates an instance of AtcExplicitBitmapContent with the specified width and height.
             </summary>
             <param name="width">The width in pixels of the bitmap.</param>
             <param name="height">The height in pixels of the bitmap.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.AtcExplicitBitmapContent.TryGetFormat(Microsoft.Xna.Framework.Graphics.SurfaceFormat@)">
             <summary>
             Gets the corresponding GPU texture format for the specified bitmap type.
             </summary>
             <param name="format">Format being retrieved.</param>
             <returns>The GPU texture format of the bitmap type.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.AtcExplicitBitmapContent.ToString">
             <summary>
             Returns a string description of the bitmap.
             </summary>
             <returns>Description of the bitmap.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.AtcInterpolatedBitmapContent.#ctor">
             <summary>
             Creates an instance of AtcInterpolatedBitmapContent.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.AtcInterpolatedBitmapContent.#ctor(System.Int32,System.Int32)">
             <summary>
             Creates an instance of AtcInterpolatedBitmapContent with the specified width and height.
             </summary>
             <param name="width">The width in pixels of the bitmap.</param>
             <param name="height">The height in pixels of the bitmap.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.AtcInterpolatedBitmapContent.TryGetFormat(Microsoft.Xna.Framework.Graphics.SurfaceFormat@)">
             <summary>
             Gets the corresponding GPU texture format for the specified bitmap type.
             </summary>
             <param name="format">Format being retrieved.</param>
             <returns>The GPU texture format of the bitmap type.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.AtcInterpolatedBitmapContent.ToString">
             <summary>
             Returns a string description of the bitmap.
             </summary>
             <returns>Description of the bitmap.</returns>
            </member>
        <member name="T:Microsoft.Xna.Framework.Content.Pipeline.Graphics.BitmapContent">
             <summary>
             Provides properties and methods for creating and maintaining a bitmap resource.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Content.Pipeline.Graphics.BitmapContent.Height">
             <summary>
             Gets or sets the height of the bitmap, in pixels.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Content.Pipeline.Graphics.BitmapContent.Width">
             <summary>
             Gets or sets the width of the bitmap, in pixels.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.BitmapContent.#ctor">
             <summary>
             Initializes a new instance of BitmapContent.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.BitmapContent.#ctor(System.Int32,System.Int32)">
             <summary>
             Initializes a new instance of BitmapContent with the specified width or height.
             </summary>
             <param name="width">Width, in pixels, of the bitmap resource.</param>
             <param name="height">Height, in pixels, of the bitmap resource.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.BitmapContent.Copy(Microsoft.Xna.Framework.Content.Pipeline.Graphics.BitmapContent,Microsoft.Xna.Framework.Content.Pipeline.Graphics.BitmapContent)">
             <summary>
             Copies one bitmap into another.
             The destination bitmap can be in any format and size. If the destination is larger or smaller, the source bitmap is scaled accordingly.
             </summary>
             <param name="sourceBitmap">BitmapContent being copied.</param>
             <param name="destinationBitmap">BitmapContent being overwritten.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.BitmapContent.Copy(Microsoft.Xna.Framework.Content.Pipeline.Graphics.BitmapContent,Microsoft.Xna.Framework.Rectangle,Microsoft.Xna.Framework.Content.Pipeline.Graphics.BitmapContent,Microsoft.Xna.Framework.Rectangle)">
             <summary>
             Copies one bitmap into another.
             The destination bitmap can be in any format and size. If the destination is larger or smaller, the source bitmap is scaled accordingly.
             </summary>
             <param name="sourceBitmap">BitmapContent being copied.</param>
             <param name="sourceRegion">Region of sourceBitmap.</param>
             <param name="destinationBitmap">BitmapContent being overwritten.</param>
             <param name="destinationRegion">Region of bitmap to be overwritten.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.BitmapContent.GetPixelData">
             <summary>
             Reads encoded bitmap content.
             </summary>
             <returns>Array containing encoded bitmap data.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.BitmapContent.SetPixelData(System.Byte[])">
             <summary>
             Writes encoded bitmap content.
             </summary>
             <param name="sourceData">Array containing encoded bitmap data to be set.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.BitmapContent.ToString">
             <summary>
             Returns a string description of the bitmap resource.
             </summary>
             <returns>Description of the bitmap.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.BitmapContent.TryCopyFrom(Microsoft.Xna.Framework.Content.Pipeline.Graphics.BitmapContent,Microsoft.Xna.Framework.Rectangle,Microsoft.Xna.Framework.Rectangle)">
             <summary>
             Attempts to copy a region from a specified bitmap.
             </summary>
             <param name="sourceBitmap">BitmapContent being copied.</param>
             <param name="sourceRegion">Location of sourceBitmap.</param>
             <param name="destinationRegion">Region of destination bitmap to be overwritten.</param>
             <returns>true if region copy is supported; false otherwise.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.BitmapContent.TryCopyTo(Microsoft.Xna.Framework.Content.Pipeline.Graphics.BitmapContent,Microsoft.Xna.Framework.Rectangle,Microsoft.Xna.Framework.Rectangle)">
             <summary>
             Attempts to copy a region of the specified bitmap onto another.
             </summary>
             <param name="destinationBitmap">BitmapContent being overwritten.</param>
             <param name="sourceRegion">Location of the source bitmap.</param>
             <param name="destinationRegion">Region of destination bitmap to be overwritten.</param>
             <returns>true if region copy is supported; false otherwise.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.BitmapContent.TryGetFormat(Microsoft.Xna.Framework.Graphics.SurfaceFormat@)">
             <summary>
             Gets the corresponding GPU texture format for the specified bitmap type.
             </summary>
             <param name="format">Format being retrieved.</param>
             <returns>The GPU texture format of the bitmap type.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.BitmapContent.ValidateCopyArguments(Microsoft.Xna.Framework.Content.Pipeline.Graphics.BitmapContent,Microsoft.Xna.Framework.Rectangle,Microsoft.Xna.Framework.Content.Pipeline.Graphics.BitmapContent,Microsoft.Xna.Framework.Rectangle)">
             <summary>
             Validates the arguments to the Copy function.
             </summary>
             <param name="sourceBitmap">BitmapContent being copied.</param>
             <param name="sourceRegion">Location of sourceBitmap.</param>
             <param name="destinationBitmap">BitmapContent being overwritten.</param>
             <param name="destinationRegion">Region of bitmap to be overwritten.</param>
            </member>
        <member name="T:Microsoft.Xna.Framework.Content.Pipeline.Graphics.BoneContent">
             <summary>
             Represents an animation skeleton.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.BoneContent.#ctor">
             <summary>
             Initializes a new instance of BoneContent.
             </summary>
            </member>
        <member name="T:Microsoft.Xna.Framework.Content.Pipeline.Graphics.BoneWeight">
             <summary>
             Provides properties for managing a bone weight.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Content.Pipeline.Graphics.BoneWeight.BoneName">
             <summary>
             Gets the name of the bone.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Content.Pipeline.Graphics.BoneWeight.Weight">
             <summary>
             Gets the amount of bone influence, ranging from zero to one. The complete set of weights in a BoneWeightCollection should sum to one.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.BoneWeight.#ctor(System.String,System.Single)">
             <summary>
             Initializes a new instance of BoneWeight with the specified name and weight.
             </summary>
             <param name="boneName">Name of the bone.</param>
             <param name="weight">Amount of influence, ranging from zero to one.</param>
            </member>
        <member name="T:Microsoft.Xna.Framework.Content.Pipeline.Graphics.BoneWeightCollection">
             <summary>
             Collection of bone weights of a vertex.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.BoneWeightCollection.#ctor">
             <summary>
             Initializes a new instance of BoneWeightCollection.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.BoneWeightCollection.NormalizeWeights">
             <summary>
             Normalizes the contents of the weights list.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.BoneWeightCollection.NormalizeWeights(System.Int32)">
             <summary>
             Normalizes the contents of the bone weights list.
             </summary>
             <param name="maxWeights">Maximum number of weights allowed.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.CharacterRegion.Any``1(System.Collections.Generic.IEnumerable{``0})">
             <summary>
             Test if there is an element in this enumeration.
             </summary>
             <typeparam name="T">Type of the element</typeparam>
             <param name="source">The enumerable source.</param>
             <returns><c>true</c> if there is an element in this enumeration, <c>false</c> otherwise</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.CharacterRegion.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})">
             <summary>
             Select elements from an enumeration.
             </summary>
             <typeparam name="TSource">The type of the T source.</typeparam>
             <typeparam name="TResult">The type of the T result.</typeparam>
             <param name="source">The source.</param>
             <param name="selector">The selector.</param>
             <returns>A enumeration of selected values</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.CharacterRegion.Distinct``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
             <summary>
             Selects distinct elements from an enumeration.
             </summary>
             <typeparam name="TSource">The type of the T source.</typeparam>
             <param name="source">The source.</param>
             <param name="comparer">The comparer.</param>
             <returns>A enumeration of selected values</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.Dxt1BitmapContent.TryGetFormat(Microsoft.Xna.Framework.Graphics.SurfaceFormat@)">
             <summary>
             Gets the corresponding GPU texture format for the specified bitmap type.
             </summary>
             <param name="format">Format being retrieved.</param>
             <returns>The GPU texture format of the bitmap type.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.Dxt1BitmapContent.ToString">
             <summary>
             Returns a string description of the bitmap.
             </summary>
             <returns>Description of the bitmap.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.Dxt3BitmapContent.TryGetFormat(Microsoft.Xna.Framework.Graphics.SurfaceFormat@)">
             <summary>
             Gets the corresponding GPU texture format for the specified bitmap type.
             </summary>
             <param name="format">Format being retrieved.</param>
             <returns>The GPU texture format of the bitmap type.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.Dxt3BitmapContent.ToString">
             <summary>
             Returns a string description of the bitmap.
             </summary>
             <returns>Description of the bitmap.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.Dxt5BitmapContent.TryGetFormat(Microsoft.Xna.Framework.Graphics.SurfaceFormat@)">
             <summary>
             Gets the corresponding GPU texture format for the specified bitmap type.
             </summary>
             <param name="format">Format being retrieved.</param>
             <returns>The GPU texture format of the bitmap type.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.Dxt5BitmapContent.ToString">
             <summary>
             Returns a string description of the bitmap.
             </summary>
             <returns>Description of the bitmap.</returns>
            </member>
        <member name="T:Microsoft.Xna.Framework.Content.Pipeline.Graphics.EffectContent">
             <summary>
             Contains the source code for a DirectX Effect, loaded from a .fx file.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.EffectContent.#ctor">
             <summary>
             Initializes a new instance of EffectContent.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Content.Pipeline.Graphics.EffectContent.EffectCode">
             <summary>
             Gets or sets the effect program source code.
             </summary>
            </member>
        <member name="T:Microsoft.Xna.Framework.Content.Pipeline.Graphics.Etc1BitmapContent">
             <summary>
             Supports the processing of a texture compressed using ETC1.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.Etc1BitmapContent.#ctor">
             <summary>
             Initializes a new instance of Etc1BitmapContent.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.Etc1BitmapContent.#ctor(System.Int32,System.Int32)">
             <summary>
             Initializes a new instance of Etc1BitmapContent with the specified width or height.
             </summary>
             <param name="width">Width in pixels of the bitmap resource.</param>
             <param name="height">Height in pixels of the bitmap resource.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.Etc1BitmapContent.TryGetFormat(Microsoft.Xna.Framework.Graphics.SurfaceFormat@)">
             <summary>
             Gets the corresponding GPU texture format for the specified bitmap type.
             </summary>
             <param name="format">Format being retrieved.</param>
             <returns>The GPU texture format of the bitmap type.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.Etc1BitmapContent.ToString">
             <summary>
             Returns a string description of the bitmap.
             </summary>
             <returns>Description of the bitmap.</returns>
            </member>
        <member name="T:Microsoft.Xna.Framework.Content.Pipeline.Graphics.FontDescription">
             <summary>
             Provides information to the FontDescriptionProcessor describing which font to rasterize, which font size to utilize, and which Unicode characters to include in the processor output.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Content.Pipeline.Graphics.FontDescription.FontName">
             <summary>
             Gets or sets the name of the font, such as "Times New Roman" or "Arial". This value cannot be null or empty.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Content.Pipeline.Graphics.FontDescription.Size">
             <summary>
             Gets or sets the size, in points, of the font.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Content.Pipeline.Graphics.FontDescription.Spacing">
             <summary>
             Gets or sets the amount of space, in pixels, to insert between letters in a string.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Content.Pipeline.Graphics.FontDescription.UseKerning">
             <summary>
             Indicates if kerning information is used when drawing characters.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Content.Pipeline.Graphics.FontDescription.Style">
             <summary>
             Gets or sets the style of the font, expressed as a combination of one or more FontDescriptionStyle flags.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Content.Pipeline.Graphics.FontDescription.DefaultCharacter">
             <summary>
             Gets or sets the default character for the font.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.FontDescription.#ctor(System.String,System.Single,System.Single)">
             <summary>
             Initializes a new instance of FontDescription and initializes its members to the specified font, size, and spacing, using FontDescriptionStyle.Regular as the default value for Style.
             </summary>
             <param name="fontName">The name of the font, such as Times New Roman.</param>
             <param name="size">The size, in points, of the font.</param>
             <param name="spacing">The amount of space, in pixels, to insert between letters in a string.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.FontDescription.#ctor(System.String,System.Single,System.Single,Microsoft.Xna.Framework.Content.Pipeline.Graphics.FontDescriptionStyle)">
             <summary>
             Initializes a new instance of FontDescription and initializes its members to the specified font, size, spacing, and style.
             </summary>
             <param name="fontName">The name of the font, such as Times New Roman.</param>
             <param name="size">The size, in points, of the font.</param>
             <param name="spacing">The amount of space, in pixels, to insert between letters in a string.</param>
             <param name="fontStyle">The font style for the font.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.FontDescription.#ctor(System.String,System.Single,System.Single,Microsoft.Xna.Framework.Content.Pipeline.Graphics.FontDescriptionStyle,System.Boolean)">
             <summary>
             Initializes a new instance of FontDescription using the specified values.
             </summary>
             <param name="fontName">The name of the font, such as Times New Roman.</param>
             <param name="size">The size, in points, of the font.</param>
             <param name="spacing">The amount of space, in pixels, to insert between letters in a string.</param>
             <param name="fontStyle">The font style for the font.</param>
             <param name="useKerning">true if kerning information is used when drawing characters; false otherwise.</param>
            </member>
        <member name="T:Microsoft.Xna.Framework.Content.Pipeline.Graphics.FontDescriptionStyle">
             <summary>
             Flags that describe style information to be applied to text.
             You can combine these flags by using a bitwise OR operator (|).
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Content.Pipeline.Graphics.FontDescriptionStyle.Bold">
             <summary>
             Bold text.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Content.Pipeline.Graphics.FontDescriptionStyle.Italic">
             <summary>
             Italic text.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Content.Pipeline.Graphics.FontDescriptionStyle.Regular">
             <summary>
             Normal text.
             </summary>
            </member>
        <member name="T:Microsoft.Xna.Framework.Content.Pipeline.Graphics.GeometryContent">
             <summary>
             Provides properties that define various aspects of a geometry batch.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Content.Pipeline.Graphics.GeometryContent.Indices">
             <summary>
             Gets the list of triangle indices for this geometry batch. Geometry is stored as an indexed triangle list, where each group of three indices defines a single triangle.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Content.Pipeline.Graphics.GeometryContent.Material">
             <summary>
             Gets or sets the material of the parent mesh.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Content.Pipeline.Graphics.GeometryContent.Parent">
             <summary>
             Gets or sets the parent MeshContent for this object.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Content.Pipeline.Graphics.GeometryContent.Vertices">
             <summary>
             Gets the set of vertex batches for the geometry batch.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.GeometryContent.#ctor">
             <summary>
             Creates an instance of GeometryContent.
             </summary>
            </member>
        <member name="T:Microsoft.Xna.Framework.Content.Pipeline.Graphics.GeometryContentCollection">
             <summary>
             Provides methods for maintaining a collection of geometry batches that make up a mesh.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.GeometryContentCollection.GetParent(Microsoft.Xna.Framework.Content.Pipeline.Graphics.GeometryContent)">
             <summary>
             Gets the parent of a child object.
             </summary>
             <param name="child">The child of the parent being retrieved.</param>
             <returns>The parent of the child object.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.GeometryContentCollection.SetParent(Microsoft.Xna.Framework.Content.Pipeline.Graphics.GeometryContent,Microsoft.Xna.Framework.Content.Pipeline.Graphics.MeshContent)">
             <summary>
             Sets the parent of the specified child object.
             </summary>
             <param name="child">The child of the parent being set.</param>
             <param name="parent">The parent of the child object.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.GraphicsUtil.GetNextPowerOfTwo(System.Int32)">
             <summary>
             Returns the next power of two. Returns same value if already is PoT.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Content.Pipeline.Graphics.GraphicsUtil.AlphaRange.Opaque">
             <summary>
             Pixel data has no alpha values below 1.0.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Content.Pipeline.Graphics.GraphicsUtil.AlphaRange.Cutout">
             <summary>
             Pixel data contains alpha values that are either 0.0 or 1.0.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Content.Pipeline.Graphics.GraphicsUtil.AlphaRange.Full">
             <summary>
             Pixel data contains alpha values that cover the full range of 0.0 to 1.0.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.GraphicsUtil.CalculateAlphaRange(Microsoft.Xna.Framework.Content.Pipeline.Graphics.BitmapContent)">
             <summary>
             Gets the alpha range in a set of pixels.
             </summary>
             <param name="bitmap">A bitmap of full-colour floating point pixel data in RGBA or BGRA order.</param>
             <returns>A member of the AlphaRange enum to describe the range of alpha in the pixel data.</returns>
            </member>
        <member name="T:Microsoft.Xna.Framework.Content.Pipeline.Graphics.IndexCollection">
             <summary>
             Provides methods for maintaining a list of index values.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.IndexCollection.#ctor">
             <summary>
             Initializes a new instance of IndexCollection.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.IndexCollection.AddRange(System.Collections.Generic.IEnumerable{System.Int32})">
             <summary>
             Add a range of indices to the collection.
             </summary>
             <param name="indices">A collection of indices to add.</param>
            </member>
        <member name="T:Microsoft.Xna.Framework.Content.Pipeline.Graphics.IndirectPositionCollection">
             <summary>
             Provides methods for maintaining a list of vertex positions.
             </summary>
             <remarks>
             This class is designed to collect the vertex positions for a VertexContent object. Use the contents
             of the PositionIndices property (of the contained VertexContent object) to index into the Positions 
             property of the parent mesh.
             </remarks>
            </member>
        <member name="P:Microsoft.Xna.Framework.Content.Pipeline.Graphics.IndirectPositionCollection.Count">
             <summary>
             Number of positions in the collection.
             </summary>
             <value>Number of positions.</value>
            </member>
        <member name="P:Microsoft.Xna.Framework.Content.Pipeline.Graphics.IndirectPositionCollection.Item(System.Int32)">
             <summary>
             Gets or sets the position at the specified index.
             </summary>
             <value>Position located at index.</value>
            </member>
        <member name="P:Microsoft.Xna.Framework.Content.Pipeline.Graphics.IndirectPositionCollection.System#Collections#Generic#ICollection{Microsoft#Xna#Framework#Vector3}#IsReadOnly">
             <summary>
             Gets a value indicating whether this object is read-only.
             </summary>
             <value>true if this object is read-only; false otherwise.</value>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.IndirectPositionCollection.#ctor(Microsoft.Xna.Framework.Content.Pipeline.Graphics.GeometryContent,Microsoft.Xna.Framework.Content.Pipeline.Graphics.VertexChannel{System.Int32})">
             <summary>
             Initializes a new instance of IndirectPositionCollection.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.IndirectPositionCollection.Contains(Microsoft.Xna.Framework.Vector3)">
             <summary>
             Determines whether the specified position is in the collection.
             </summary>
             <param name="item">Position being searched for in the collection.</param>
             <returns>true if the position was found; false otherwise.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.IndirectPositionCollection.CopyTo(Microsoft.Xna.Framework.Vector3[],System.Int32)">
             <summary>
             Copies the specified positions to an array, starting at the specified index.
             </summary>
             <param name="array">Array of positions to be copied.</param>
             <param name="arrayIndex">Index of the first copied position.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.IndirectPositionCollection.GetEnumerator">
             <summary>
             Gets an enumerator interface for reading the position values.
             </summary>
             <returns>Interface for enumerating the collection of position values.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.IndirectPositionCollection.IndexOf(Microsoft.Xna.Framework.Vector3)">
             <summary>
             Gets the index of the specified position in a collection.
             </summary>
             <param name="item">Position being searched for.</param>
             <returns>Index of the specified position or -1 if not found.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.IndirectPositionCollection.System#Collections#IEnumerable#GetEnumerator">
             <summary>
             Returns an enumerator that can iterate through the collection.
             </summary>
             <returns>Enumerator that can iterate through the collection.</returns>
            </member>
        <member name="T:Microsoft.Xna.Framework.Content.Pipeline.Graphics.MaterialContent">
             <summary>
             Provides methods and properties for maintaining a collection of named texture references.
             </summary>
             <remarks>In addition to texture references, opaque data values are stored in the OpaqueData property of the base class.</remarks>
            </member>
        <member name="P:Microsoft.Xna.Framework.Content.Pipeline.Graphics.MaterialContent.Textures">
             <summary>
             Gets the texture collection of the material.
             </summary>
             <value>Collection of textures used by the material.</value>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.MaterialContent.#ctor">
             <summary>
             Initializes a new instance of MaterialContent.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.MaterialContent.GetReferenceTypeProperty``1(System.String)">
             <summary>
             Gets a reference type from the OpaqueDataDictionary collection.
             </summary>
             <typeparam name="T">Type of the related opaque data.</typeparam>
             <param name="key">Key of the property being retrieved.</param>
             <returns>The related opaque data.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.MaterialContent.GetTexture(System.String)">
             <summary>
             Gets a value from the Textures collection.
             </summary>
             <param name="key">Key of the texture being retrieved.</param>
             <returns>Reference to a texture from the collection.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.MaterialContent.GetValueTypeProperty``1(System.String)">
             <summary>
             Gets a value type from the OpaqueDataDictionary collection.
             </summary>
             <typeparam name="T">Type of the value being retrieved.</typeparam>
             <param name="key">Key of the value type being retrieved.</param>
             <returns>Index of the value type beng retrieved.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.MaterialContent.SetProperty``1(System.String,``0)">
             <summary>
             Sets a value in the contained OpaqueDataDictionary object.
             If null is passed, the value is removed.
             </summary>
             <typeparam name="T">Type of the element being set.</typeparam>
             <param name="key">Name of the key being modified.</param>
             <param name="value">Value being set.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.MaterialContent.SetTexture(System.String,Microsoft.Xna.Framework.Content.Pipeline.ExternalReference{Microsoft.Xna.Framework.Content.Pipeline.Graphics.TextureContent})">
             <summary>
             Sets a value in the contained TextureReferenceDictionary object.
             If null is passed, the value is removed.
             </summary>
             <param name="key">Name of the key being modified.</param>
             <param name="value">Value being set.</param>
             <remarks>The key value differs depending on the type of attached dictionary.
             If attached to a BasicMaterialContent dictionary (which becomes a BasicEffect object at run time), the value for the Texture key is used as the texture for the BasicEffect runtime object. Other keys are ignored.
             If attached to a EffectMaterialContent dictionary, key names are the texture names used by the effect. These names are dependent upon the author of the effect object.</remarks>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.MaterialContent.Clone">
             <summary>
             Helper method to make a copy of a material.
             </summary>
             <returns>A clone of the material.</returns>
            </member>
        <member name="T:Microsoft.Xna.Framework.Content.Pipeline.Graphics.MeshContent">
             <summary>
             Provides properties and methods that define various aspects of a mesh.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Content.Pipeline.Graphics.MeshContent.Geometry">
             <summary>
             Gets the list of geometry batches for the mesh.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Content.Pipeline.Graphics.MeshContent.Positions">
             <summary>
             Gets the list of vertex position values.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.MeshContent.#ctor">
             <summary>
             Initializes a new instance of MeshContent.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.MeshContent.TransformContents(Microsoft.Xna.Framework.Matrix@)">
             <summary>
             Applies a transform directly to position and normal channels. Node transforms are unaffected.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.MeshHelper.CalculateNormals(Microsoft.Xna.Framework.Content.Pipeline.Graphics.MeshContent,System.Boolean)">
             <summary>
             Generates vertex normals by accumulation of triangle face normals.
             </summary>
             <param name="mesh">The mesh which will recieve the normals.</param>
             <param name="overwriteExistingNormals">Overwrite or skip over geometry with existing normals.</param>
             <remarks>
             This calls <see cref="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.MeshHelper.CalculateNormals(Microsoft.Xna.Framework.Content.Pipeline.Graphics.GeometryContent,System.Boolean)" /> to do the work.
             </remarks>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.MeshHelper.CalculateNormals(Microsoft.Xna.Framework.Content.Pipeline.Graphics.GeometryContent,System.Boolean)">
             <summary>
             Generates vertex normals by accumulation of triangle face normals.
             </summary>
             <param name="geom">The geometry which will recieve the normals.</param>
             <param name="overwriteExistingNormals">Overwrite or skip over geometry with existing normals.</param>
             <remarks>
             We use a "Mean Weighted Equally" method generate vertex normals from triangle 
             face normals.  If normal cannot be calculated from the geometry we set it to zero.
             </remarks>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.MeshHelper.CalculateTangentFrames(Microsoft.Xna.Framework.Content.Pipeline.Graphics.MeshContent,System.String,System.String,System.String)">
             <summary>
             Generate the tangents and binormals (tangent frames) for each vertex in the mesh.
             </summary>
             <param name="mesh">The mesh which will have add tangent and binormal channels added.</param>
             <param name="textureCoordinateChannelName">The Vector2 texture coordinate channel used to generate tangent frames.</param>
             <param name="tangentChannelName"></param>
             <param name="binormalChannelName"></param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.MeshHelper.FindSkeleton(Microsoft.Xna.Framework.Content.Pipeline.Graphics.NodeContent)">
             <summary>
             Search for the root bone of the skeletion.
             </summary>
             <param name="node">The node from which to begin the search for the skeleton.</param>
             <returns>The root bone of the skeletion or null if none is found.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.MeshHelper.FlattenSkeleton(Microsoft.Xna.Framework.Content.Pipeline.Graphics.BoneContent)">
             <summary>
             Traverses a skeleton depth-first and builds a list of its bones.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.MeshHelper.SwapWindingOrder(Microsoft.Xna.Framework.Content.Pipeline.Graphics.MeshContent)">
             <summary>
             Reverses the triangle winding order of the mesh.
             </summary>
             <param name="mesh">The mesh which will be modified.</param>
             <remarks>
             This method is useful when changing the direction of backface culling
             like when switching between left/right handed coordinate systems.
             </remarks>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.MeshHelper.TransformScene(Microsoft.Xna.Framework.Content.Pipeline.Graphics.NodeContent,Microsoft.Xna.Framework.Matrix)">
             <summary>
             Transforms the contents of a node and its descendants.
             </summary>
             <remarks>The node transforms themselves are unaffected.</remarks>
             <param name="scene">The root node of the scene to transform.</param>
             <param name="transform">The transform matrix to apply to the scene.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.MeshHelper.IsLeftHanded(Microsoft.Xna.Framework.Matrix@)">
             <summary>
             Determines whether the specified transform is left-handed.
             </summary>
             <param name="xform">The transform.</param>
             <returns>
             <see langword="true" /> if <paramref name="xform" /> is left-handed; otherwise,
             <see langword="false" /> if <paramref name="xform" /> is right-handed.
             </returns>
            </member>
        <member name="T:Microsoft.Xna.Framework.Content.Pipeline.Graphics.MipmapChain">
             <summary>
             Provides methods for accessing a mipmap chain.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.MipmapChain.#ctor">
             <summary>
             Initializes a new instance of MipmapChain.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.MipmapChain.#ctor(Microsoft.Xna.Framework.Content.Pipeline.Graphics.BitmapContent)">
             <summary>
             Initializes a new instance of MipmapChain with the specified mipmap.
             </summary>
             <param name="bitmap"></param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.MipmapChain.op_Implicit(Microsoft.Xna.Framework.Content.Pipeline.Graphics.BitmapContent)~Microsoft.Xna.Framework.Content.Pipeline.Graphics.MipmapChain">
             <summary>
             Constructs a new mipmap chain containing the specified bitmap.
             </summary>
             <param name="bitmap">Bitmap used for the mipmap chain.</param>
             <returns>Resultant mipmap chain.</returns>
            </member>
        <member name="T:Microsoft.Xna.Framework.Content.Pipeline.Graphics.MipmapChainCollection">
             <summary>
             Provides methods for maintaining a mipmap chain.
             </summary>
            </member>
        <member name="T:Microsoft.Xna.Framework.Content.Pipeline.Graphics.NodeContent">
             <summary>
             Provides a base class for graphics types that define local coordinate systems.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Content.Pipeline.Graphics.NodeContent.AbsoluteTransform">
             <summary>
             Gets the value of the local Transform property, multiplied by the AbsoluteTransform of the parent.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Content.Pipeline.Graphics.NodeContent.Animations">
             <summary>
             Gets the set of animations belonging to this node.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Content.Pipeline.Graphics.NodeContent.Children">
             <summary>
             Gets the children of the NodeContent object.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Content.Pipeline.Graphics.NodeContent.Parent">
             <summary>
             Gets the parent of this NodeContent object.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Content.Pipeline.Graphics.NodeContent.Transform">
             <summary>
             Gets the transform matrix of the scene.
             The transform matrix defines a local coordinate system for the content in addition to any children of this object.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.NodeContent.#ctor">
             <summary>
             Creates an instance of NodeContent.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.NodeContentCollection.#ctor(Microsoft.Xna.Framework.Content.Pipeline.Graphics.NodeContent)">
             <summary>
             Creates an instance of NodeContentCollection.
             </summary>
             <param name="parent">Parent object of the child objects returned in the collection.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.NodeContentCollection.GetParent(Microsoft.Xna.Framework.Content.Pipeline.Graphics.NodeContent)">
             <summary>
             Gets the parent of a child object.
             </summary>
             <param name="child">The child of the parent being retrieved.</param>
             <returns>The parent of the child object.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.NodeContentCollection.SetParent(Microsoft.Xna.Framework.Content.Pipeline.Graphics.NodeContent,Microsoft.Xna.Framework.Content.Pipeline.Graphics.NodeContent)">
             <summary>
             Modifies the value of the parent object of the specified child object.
             </summary>
             <param name="child">The child of the parent being modified.</param>
             <param name="parent">The new value for the parent object.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.PixelBitmapContent`1.TryGetFormat(Microsoft.Xna.Framework.Graphics.SurfaceFormat@)">
             <summary>
             Gets the corresponding GPU texture format for the specified bitmap type.
             </summary>
             <param name="format">Format being retrieved.</param>
             <returns>The GPU texture format of the bitmap type.</returns>
            </member>
        <member name="T:Microsoft.Xna.Framework.Content.Pipeline.Graphics.PositionCollection">
             <summary>
             Provides a collection of vertex position values.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.PositionCollection.#ctor">
             <summary>
             Initializes a new instance of PositionCollection.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.PvrtcRgb2BitmapContent.#ctor(System.Int32,System.Int32)">
             <summary>
             Creates an instance of PvrtcRgb2BitmapContent with the specified width and height.
             </summary>
             <param name="width">The width in pixels of the bitmap.</param>
             <param name="height">The height in pixels of the bitmap.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.PvrtcRgb2BitmapContent.TryGetFormat(Microsoft.Xna.Framework.Graphics.SurfaceFormat@)">
             <summary>
             Gets the corresponding GPU texture format for the specified bitmap type.
             </summary>
             <param name="format">Format being retrieved.</param>
             <returns>The GPU texture format of the bitmap type.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.PvrtcRgb2BitmapContent.ToString">
             <summary>
             Returns a string description of the bitmap.
             </summary>
             <returns>Description of the bitmap.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.PvrtcRgb4BitmapContent.#ctor(System.Int32,System.Int32)">
             <summary>
             Creates an instance of PvrtcRgb4BitmapContent with the specified width and height.
             </summary>
             <param name="width">The width in pixels of the bitmap.</param>
             <param name="height">The height in pixels of the bitmap.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.PvrtcRgb4BitmapContent.TryGetFormat(Microsoft.Xna.Framework.Graphics.SurfaceFormat@)">
             <summary>
             Gets the corresponding GPU texture format for the specified bitmap type.
             </summary>
             <param name="format">Format being retrieved.</param>
             <returns>The GPU texture format of the bitmap type.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.PvrtcRgb4BitmapContent.ToString">
             <summary>
             Returns a string description of the bitmap.
             </summary>
             <returns>Description of the bitmap.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.PvrtcRgba2BitmapContent.#ctor(System.Int32,System.Int32)">
             <summary>
             Creates an instance of PvrtcRgba2BitBitmapContent with the specified width and height.
             </summary>
             <param name="width">The width in pixels of the bitmap.</param>
             <param name="height">The height in pixels of the bitmap.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.PvrtcRgba2BitmapContent.TryGetFormat(Microsoft.Xna.Framework.Graphics.SurfaceFormat@)">
             <summary>
             Gets the corresponding GPU texture format for the specified bitmap type.
             </summary>
             <param name="format">Format being retrieved.</param>
             <returns>The GPU texture format of the bitmap type.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.PvrtcRgba2BitmapContent.ToString">
             <summary>
             Returns a string description of the bitmap.
             </summary>
             <returns>Description of the bitmap.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.PvrtcRgba4BitmapContent.#ctor(System.Int32,System.Int32)">
             <summary>
             Creates an instance of PvrtcRgba4BitBitmapContent with the specified width and height.
             </summary>
             <param name="width">The width in pixels of the bitmap.</param>
             <param name="height">The height in pixels of the bitmap.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.PvrtcRgba4BitmapContent.TryGetFormat(Microsoft.Xna.Framework.Graphics.SurfaceFormat@)">
             <summary>
             Gets the corresponding GPU texture format for the specified bitmap type.
             </summary>
             <param name="format">Format being retrieved.</param>
             <returns>The GPU texture format of the bitmap type.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.PvrtcRgba4BitmapContent.ToString">
             <summary>
             Returns a string description of the bitmap.
             </summary>
             <returns>Description of the bitmap.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.SharpFontImporter.ExpandByteAndCopy(System.Byte,System.Int32,System.Byte[],System.Int32)">
             <summary>
             Reads each individual bit of a byte from left to right and expands it to a full byte, 
             ones get byte.maxvalue, and zeros get byte.minvalue.
             </summary>
             <param name="origin">Byte to expand and copy</param>
             <param name="length">Number of Bits of the Byte to copy, from 1 to 8</param>
             <param name="destination">Byte array where to copy the results</param>
             <param name="startIndex">Position where to begin copying the results in destination</param>
            </member>
        <member name="T:Microsoft.Xna.Framework.Content.Pipeline.Graphics.TextureContent">
             <summary>
             Provides a base class for all texture objects.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Content.Pipeline.Graphics.TextureContent.Faces">
             <summary>
             Collection of image faces that hold a single mipmap chain for a regular 2D texture, six chains for a cube map, or an arbitrary number for volume and array textures.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.TextureContent.#ctor(Microsoft.Xna.Framework.Content.Pipeline.Graphics.MipmapChainCollection)">
             <summary>
             Initializes a new instance of TextureContent with the specified face collection.
             </summary>
             <param name="faces">Mipmap chain containing the face collection.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.TextureContent.ConvertBitmapType(System.Type)">
             <summary>
             Converts all bitmaps for this texture to a different format.
             </summary>
             <param name="newBitmapType">Type being converted to. The new type must be a subclass of BitmapContent, such as PixelBitmapContent or DxtBitmapContent.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.TextureContent.GenerateMipmaps(System.Boolean)">
             <summary>
             Generates a full set of mipmaps for the texture.
             </summary>
             <param name="overwriteExistingMipmaps">true if the existing mipmap set is replaced with the new set; false otherwise.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.TextureContent.Validate(System.Nullable{Microsoft.Xna.Framework.Graphics.GraphicsProfile})">
             <summary>
             Verifies that all contents of this texture are present, correct and match the capabilities of the device.
             </summary>
             <param name="targetProfile">The profile identifier that defines the capabilities of the device.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.TextureProfile.ForPlatform(Microsoft.Xna.Framework.Content.Pipeline.TargetPlatform)">
             <summary>
             Find the profile for this target platform.
             </summary>
             <param name="platform">The platform target for textures.</param>
             <returns></returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.TextureProfile.Supports(Microsoft.Xna.Framework.Content.Pipeline.TargetPlatform)">
             <summary>
             Returns true if this profile supports texture processing for this platform.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.TextureProfile.Requirements(Microsoft.Xna.Framework.Content.Pipeline.ContentProcessorContext,Microsoft.Xna.Framework.Content.Pipeline.Processors.TextureProcessorOutputFormat,System.Boolean@,System.Boolean@)">
             <summary>
             Determines if the texture format will require power-of-two dimensions and/or equal width and height.
             </summary>
             <param name="context">The processor context.</param>
             <param name="format">The desired texture format.</param>
             <param name="requiresPowerOfTwo">True if the texture format requires power-of-two dimensions.</param>
             <param name="requiresSquare">True if the texture format requires equal width and height.</param>
             <returns>True if the texture format requires power-of-two dimensions.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.TextureProfile.ConvertTexture(Microsoft.Xna.Framework.Content.Pipeline.ContentProcessorContext,Microsoft.Xna.Framework.Content.Pipeline.Graphics.TextureContent,Microsoft.Xna.Framework.Content.Pipeline.Processors.TextureProcessorOutputFormat,System.Boolean,System.Boolean)">
             <summary>
             Performs conversion of the texture content to the correct format.
             </summary>
             <param name="context">The processor context.</param>
             <param name="content">The content to be compressed.</param>
             <param name="format">The user requested format for compression.</param>
             <param name="generateMipmaps">If mipmap generation is required.</param>
             <param name="sharpAlpha">If the texture has sharp alpha cutouts.</param>
            </member>
        <member name="T:Microsoft.Xna.Framework.Content.Pipeline.Graphics.TextureReferenceDictionary">
             <summary>
             Provides a collection of named references to texture files.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.TextureReferenceDictionary.#ctor">
             <summary>
             Initializes a new instance of TextureReferenceDictionary.
             </summary>
            </member>
        <member name="T:Microsoft.Xna.Framework.Content.Pipeline.Graphics.VertexChannel">
             <summary>
             Provides methods and properties for maintaining a vertex channel.
             A vertex channel is a list of arbitrary data with one value for each vertex. Channels are stored inside a GeometryContent and identified by name.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Content.Pipeline.Graphics.VertexChannel.Items">
             <summary>
             Allows overriding classes to implement the list, and for properties/methods in this class to access it.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Content.Pipeline.Graphics.VertexChannel.Count">
             <summary>
             Gets the number of elements in the vertex channel
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Content.Pipeline.Graphics.VertexChannel.ElementType">
             <summary>
             Gets the type of data contained in this channel.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Content.Pipeline.Graphics.VertexChannel.Item(System.Int32)">
             <summary>
             Gets or sets the element at the specified index.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Content.Pipeline.Graphics.VertexChannel.Name">
             <summary>
             Gets the name of the vertex channel.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Content.Pipeline.Graphics.VertexChannel.System#Collections#ICollection#IsSynchronized">
             <summary>
             Gets a value indicating whether access to the collection is synchronized (thread safe).
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Content.Pipeline.Graphics.VertexChannel.System#Collections#ICollection#SyncRoot">
             <summary>
             Gets an object that can be used to synchronize access to the collection.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Content.Pipeline.Graphics.VertexChannel.System#Collections#IList#IsFixedSize">
             <summary>
             Gets a value indicating whether this list has a fixed size.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Content.Pipeline.Graphics.VertexChannel.System#Collections#IList#IsReadOnly">
             <summary>
             Gets a value indicating whether this object is read-only.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.VertexChannel.#ctor(System.String)">
             <summary>
             Creates an instance of VertexChannel.
             </summary>
             <param name="name">Name of the channel.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.VertexChannel.Contains(System.Object)">
             <summary>
             Determines whether the specified element is in the channel.
             </summary>
             <param name="value">Element being searched for.</param>
             <returns>true if the element is present; false otherwise.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.VertexChannel.CopyTo(System.Array,System.Int32)">
             <summary>
             Copies the elements of the channel to an array, starting at the specified index.
             </summary>
             <param name="array">Array that will receive the copied channel elements.</param>
             <param name="index">Starting index for copy operation.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.VertexChannel.GetEnumerator">
             <summary>
             Gets an enumerator interface for reading channel content.
             </summary>
             <returns>Enumeration of the channel content.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.VertexChannel.IndexOf(System.Object)">
             <summary>
             Gets the index of the specified item.
             </summary>
             <param name="value">Item whose index is to be retrieved.</param>
             <returns>Index of specified item.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.VertexChannel.ReadConvertedContent``1">
             <summary>
             Reads channel content and automatically converts it to the specified vector format.
             </summary>
             <typeparam name="TargetType">Target vector format of the converted data.</typeparam>
             <returns>The converted data.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.VertexChannel.System#Collections#IList#Add(System.Object)">
             <summary>
             Adds a new element to the end of the collection.
             </summary>
             <param name="value">The element to add.</param>
             <returns>Index of the element.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.VertexChannel.System#Collections#IList#Clear">
             <summary>
             Removes all elements from the collection.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.VertexChannel.System#Collections#IList#Insert(System.Int32,System.Object)">
             <summary>
             Inserts an element into the collection at the specified position.
             </summary>
             <param name="index">Index at which to insert the element.</param>
             <param name="value">The element to insert.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.VertexChannel.InsertRange(System.Int32,System.Collections.IEnumerable)">
             <summary>
             Inserts the range of values from the enumerable into the channel.
             </summary>
             <param name="index">The zero-based index at which the new elements should be inserted.</param>
             <param name="data">The data to insert into the channel.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.VertexChannel.System#Collections#IList#Remove(System.Object)">
             <summary>
             Removes a specified element from the collection.
             </summary>
             <param name="value">The element to remove.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.VertexChannel.System#Collections#IList#RemoveAt(System.Int32)">
             <summary>
             Removes the element at the specified index position.
             </summary>
             <param name="index">Index of the element to remove.</param>
            </member>
        <member name="T:Microsoft.Xna.Framework.Content.Pipeline.Graphics.VertexChannelCollection">
             <summary>
             Provides methods and properties for managing a list of vertex data channels.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Content.Pipeline.Graphics.VertexChannelCollection.Count">
             <summary>
             Gets the number of vertex channels in the collection.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Content.Pipeline.Graphics.VertexChannelCollection.Item(System.Int32)">
             <summary>
             Gets or sets the vertex channel at the specified index position.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Content.Pipeline.Graphics.VertexChannelCollection.Item(System.String)">
             <summary>
             Gets or sets the vertex channel with the specified name.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Content.Pipeline.Graphics.VertexChannelCollection.System#Collections#Generic#ICollection{Microsoft#Xna#Framework#Content#Pipeline#Graphics#VertexChannel}#IsReadOnly">
             <summary>
             Determines whether the collection is read-only.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.VertexChannelCollection.#ctor(Microsoft.Xna.Framework.Content.Pipeline.Graphics.VertexContent)">
             <summary>
             Creates an instance of VertexChannelCollection.
             </summary>
             <param name="vertexContent">The VertexContent object that owns this collection.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.VertexChannelCollection.Add``1(System.String,System.Collections.Generic.IEnumerable{``0})">
             <summary>
             Adds a new vertex channel to the end of the collection.
             </summary>
             <typeparam name="ElementType">Type of the channel.</typeparam>
             <param name="name">Name of the new channel.</param>
             <param name="channelData">Initial data for the new channel. If null, the channel is filled with the default value for that type.</param>
             <returns>The newly added vertex channel.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.VertexChannelCollection.Add(System.String,System.Type,System.Collections.IEnumerable)">
             <summary>
             Adds a new vertex channel to the end of the collection.
             </summary>
             <param name="name">Name of the new channel.</param>
             <param name="elementType">Type of data to be contained in the new channel.</param>
             <param name="channelData">Initial data for the new channel. If null, the channel is filled with the default value for that type.</param>
             <returns>The newly added vertex channel.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.VertexChannelCollection.Clear">
             <summary>
             Removes all vertex channels from the collection.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.VertexChannelCollection.Contains(System.String)">
             <summary>
             Determines whether the collection contains the specified vertex channel.
             </summary>
             <param name="name">Name of the channel being searched for.</param>
             <returns>true if the channel was found; false otherwise.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.VertexChannelCollection.Contains(Microsoft.Xna.Framework.Content.Pipeline.Graphics.VertexChannel)">
             <summary>
             Determines whether the collection contains the specified vertex channel.
             </summary>
             <param name="item">The channel being searched for.</param>
             <returns>true if the channel was found; false otherwise.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.VertexChannelCollection.ConvertChannelContent``1(System.Int32)">
             <summary>
             Converts the channel, at the specified index, to another vector format.
             </summary>
             <typeparam name="TargetType">Type of the target format. Can be one of the following: Single, Vector2, Vector3, Vector4, IPackedVector</typeparam>
             <param name="index">Index of the channel to be converted.</param>
             <returns>New channel in the specified format.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.VertexChannelCollection.ConvertChannelContent``1(System.String)">
             <summary>
             Converts the channel, specified by name to another vector format.
             </summary>
             <typeparam name="TargetType">Type of the target format. Can be one of the following: Single, Vector2, Vector3, Vector4, IPackedVector</typeparam>
             <param name="name">Name of the channel to be converted.</param>
             <returns>New channel in the specified format.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.VertexChannelCollection.Get``1(System.Int32)">
             <summary>
             Gets the vertex channel with the specified index and content type.
             </summary>
             <typeparam name="T">Type of a vertex channel.</typeparam>
             <param name="index">Index of a vertex channel.</param>
             <returns>The vertex channel.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.VertexChannelCollection.Get``1(System.String)">
             <summary>
             Gets the vertex channel with the specified name and content type.
             </summary>
             <typeparam name="T">Type of the vertex channel.</typeparam>
             <param name="name">Name of a vertex channel.</param>
             <returns>The vertex channel.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.VertexChannelCollection.GetEnumerator">
             <summary>
             Gets an enumerator that iterates through the vertex channels of a collection.
             </summary>
             <returns>Enumerator for the collection.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.VertexChannelCollection.IndexOf(System.String)">
             <summary>
             Determines the index of a vertex channel with the specified name.
             </summary>
             <param name="name">Name of the vertex channel being searched for.</param>
             <returns>Index of the vertex channel.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.VertexChannelCollection.IndexOf(Microsoft.Xna.Framework.Content.Pipeline.Graphics.VertexChannel)">
             <summary>
             Determines the index of the specified vertex channel.
             </summary>
             <param name="item">Vertex channel being searched for.</param>
             <returns>Index of the vertex channel.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.VertexChannelCollection.Insert``1(System.Int32,System.String,System.Collections.Generic.IEnumerable{``0})">
             <summary>
             Inserts a new vertex channel at the specified position.
             </summary>
             <typeparam name="ElementType">Type of the new channel.</typeparam>
             <param name="index">Index for channel insertion.</param>
             <param name="name">Name of the new channel.</param>
             <param name="channelData">The new channel.</param>
             <returns>The inserted vertex channel.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.VertexChannelCollection.Insert(System.Int32,System.String,System.Type,System.Collections.IEnumerable)">
             <summary>
             Inserts a new vertex channel at the specified position.
             </summary>
             <param name="index">Index for channel insertion.</param>
             <param name="name">Name of the new channel.</param>
             <param name="elementType">Type of the new channel.</param>
             <param name="channelData">Initial data for the new channel. If null, it is filled with the default value.</param>
             <returns>The inserted vertex channel.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.VertexChannelCollection.Remove(System.String)">
             <summary>
             Removes the specified vertex channel from the collection.
             </summary>
             <param name="name">Name of the vertex channel being removed.</param>
             <returns>true if the channel was removed; false otherwise.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.VertexChannelCollection.Remove(Microsoft.Xna.Framework.Content.Pipeline.Graphics.VertexChannel)">
             <summary>
             Removes the specified vertex channel from the collection.
             </summary>
             <param name="item">The vertex channel being removed.</param>
             <returns>true if the channel was removed; false otherwise.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.VertexChannelCollection.RemoveAt(System.Int32)">
             <summary>
             Removes the vertex channel at the specified index position.
             </summary>
             <param name="index">Index of the vertex channel being removed.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.VertexChannelCollection.System#Collections#Generic#ICollection{Microsoft#Xna#Framework#Content#Pipeline#Graphics#VertexChannel}#Add(Microsoft.Xna.Framework.Content.Pipeline.Graphics.VertexChannel)">
             <summary>
             Adds a new vertex channel to the collection.
             </summary>
             <param name="item">Vertex channel to be added.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.VertexChannelCollection.System#Collections#Generic#ICollection{Microsoft#Xna#Framework#Content#Pipeline#Graphics#VertexChannel}#CopyTo(Microsoft.Xna.Framework.Content.Pipeline.Graphics.VertexChannel[],System.Int32)">
             <summary>
             Copies the elements of the collection to an array, starting at the specified index.
             </summary>
             <param name="array">The destination array.</param>
             <param name="arrayIndex">The index at which to begin copying elements.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.VertexChannelCollection.System#Collections#Generic#IList{Microsoft#Xna#Framework#Content#Pipeline#Graphics#VertexChannel}#Insert(System.Int32,Microsoft.Xna.Framework.Content.Pipeline.Graphics.VertexChannel)">
             <summary>
             Inserts an item at the specified index.
             </summary>
             <param name="index">The zero-based index at which item should be inserted.</param>
             <param name="item">The item to insert.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.VertexChannelCollection.System#Collections#IEnumerable#GetEnumerator">
             <summary>
             Returns an enumerator that iterates through a collection.
             </summary>
             <returns>An object that can be used to iterate through the collection.</returns>
            </member>
        <member name="T:Microsoft.Xna.Framework.Content.Pipeline.Graphics.VertexChannel`1">
             <summary>
             Provides methods and properties for maintaining a vertex channel.
             This is a generic implementation of VertexChannel and, therefore, can handle strongly typed content data.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Content.Pipeline.Graphics.VertexChannel`1.Items">
             <summary>
             Gets the strongly-typed list for the base class to access.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Content.Pipeline.Graphics.VertexChannel`1.ElementType">
             <summary>
             Gets the type of data contained in this channel.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Content.Pipeline.Graphics.VertexChannel`1.Item(System.Int32)">
             <summary>
             Gets or sets the element at the specified index.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Content.Pipeline.Graphics.VertexChannel`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
             <summary>
             true if this object is read-only; false otherwise.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.VertexChannel`1.#ctor(System.String)">
             <summary>
             Creates an instance of VertexChannel.
             </summary>
             <param name="name">Name of the channel.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.VertexChannel`1.Contains(`0)">
             <summary>
             Determines whether the specified element is in the channel.
             </summary>
             <param name="item">Element being searched for.</param>
             <returns>true if the element is present; false otherwise.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.VertexChannel`1.CopyTo(`0[],System.Int32)">
             <summary>
             Copies the elements of the channel to an array, starting at the specified index.
             </summary>
             <param name="array">Array that will receive the copied channel elements.</param>
             <param name="arrayIndex">Starting index for copy operation.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.VertexChannel`1.GetEnumerator">
             <summary>
             Gets an enumerator interface for reading channel content.
             </summary>
             <returns>Enumeration of the channel content.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.VertexChannel`1.IndexOf(`0)">
             <summary>
             Gets the index of the specified item.
             </summary>
             <param name="item">Item whose index is to be retrieved.</param>
             <returns>Index of specified item.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.VertexChannel`1.InsertRange(System.Int32,System.Collections.IEnumerable)">
             <summary>
             Inserts the range of values from the enumerable into the channel.
             </summary>
             <param name="index">The zero-based index at which the new elements should be inserted.</param>
             <param name="data">The data to insert into the channel.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.VertexChannel`1.ReadConvertedContent``1">
             <summary>
             Reads channel content and automatically converts it to the specified vector format.
             </summary>
             <typeparam name="TargetType">Target vector format for the converted channel data.</typeparam>
             <returns>The converted channel data.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.VertexChannel`1.System#Collections#Generic#ICollection{T}#Add(`0)">
             <summary>
             Adds a new element to the end of the collection.
             </summary>
             <param name="value">The element to add.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.VertexChannel`1.System#Collections#Generic#ICollection{T}#Clear">
             <summary>
             Removes all elements from the collection.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.VertexChannel`1.System#Collections#Generic#ICollection{T}#Remove(`0)">
             <summary>
             Removes a specified element from the collection.
             </summary>
             <param name="value">The element to remove.</param>
             <returns>true if the channel was removed; false otherwise.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.VertexChannel`1.System#Collections#Generic#IList{T}#Insert(System.Int32,`0)">
             <summary>
             Inserts an element into the collection at the specified position.
             </summary>
             <param name="index">Index at which to insert the element.</param>
             <param name="value">The element to insert.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.VertexChannel`1.System#Collections#Generic#IList{T}#RemoveAt(System.Int32)">
             <summary>
             Removes the element at the specified index position.
             </summary>
             <param name="index">Index of the element to remove.</param>
            </member>
        <member name="T:Microsoft.Xna.Framework.Content.Pipeline.Graphics.VertexChannelNames">
             <summary>
             Provides properties for managing a collection of vertex channel names.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Content.Pipeline.Graphics.VertexChannelNames.usages">
             <summary>
             A lookup for the TryDecodeUsage method.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.VertexChannelNames.Binormal(System.Int32)">
             <summary>
             Gets the name of a binormal vector channel with the specified index.
             This will typically contain Vector3 data.
             </summary>
             <param name="usageIndex">Zero-based index of the vector channel being retrieved.</param>
             <returns>Name of the retrieved vector channel.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.VertexChannelNames.Color(System.Int32)">
             <summary>
             Gets the name of a color channel with the specified index.
             This will typically contain Vector3 data.
             </summary>
             <param name="usageIndex">Zero-based index of the color channel being retrieved.</param>
             <returns>Name of the retrieved color channel.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.VertexChannelNames.DecodeBaseName(System.String)">
             <summary>
             Gets a channel base name stub from the encoded string format.
             </summary>
             <param name="encodedName">Encoded string to be decoded.</param>
             <returns>Extracted base name.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.VertexChannelNames.DecodeUsageIndex(System.String)">
             <summary>
             Gets a channel usage index from the encoded format.
             </summary>
             <param name="encodedName">Encoded name to be decoded.</param>
             <returns>Resulting channel usage index.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.VertexChannelNames.EncodeName(System.String,System.Int32)">
             <summary>
             Combines a channel name stub and usage index into a string name.
             </summary>
             <param name="baseName">A channel base name stub.</param>
             <param name="usageIndex">A channel usage index.</param>
             <returns>Resulting encoded name.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.VertexChannelNames.EncodeName(Microsoft.Xna.Framework.Graphics.VertexElementUsage,System.Int32)">
             <summary>
             Combines a vertex declaration usage and usage index into a string name.
             </summary>
             <param name="vertexElementUsage">A vertex declaration.</param>
             <param name="usageIndex">An index for the vertex declaration.</param>
             <returns>Resulting encoded name.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.VertexChannelNames.Normal">
             <summary>
             Gets the name of the primary normal channel.
             This will typically contain Vector3 data.
             </summary>
             <returns>Primary normal channel name.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.VertexChannelNames.Normal(System.Int32)">
             <summary>
             Gets the name of a normal channel with the specified index.
             This will typically contain Vector3 data.
             </summary>
             <param name="usageIndex">Zero-based index of the normal channel being retrieved.</param>
             <returns>Normal channel at the specified index.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.VertexChannelNames.Tangent(System.Int32)">
             <summary>
             Gets the name of a tangent vector channel with the specified index.
             This will typically contain Vector3 data.
             </summary>
             <param name="usageIndex">Zero-based index of the tangent vector channel being retrieved.</param>
             <returns>Name of the retrieved tangent vector channel.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.VertexChannelNames.TextureCoordinate(System.Int32)">
             <summary>
             Gets the name of a texture coordinate channel with the specified index.
             This will typically contain Vector3 data.
             </summary>
             <param name="usageIndex">Zero-based index of the texture coordinate channel being retrieved.</param>
             <returns>Name of the retrieved texture coordinate channel.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.VertexChannelNames.TryDecodeUsage(System.String,Microsoft.Xna.Framework.Graphics.VertexElementUsage@)">
             <summary>
             Gets a vertex declaration usage enumeration from the encoded string format.
             </summary>
             <param name="encodedName">Encoded name of a vertex declaration.</param>
             <param name="usage">Value of the declaration usage for the vertex declaration.</param>
             <returns>true if the encoded name maps to a VertexElementUsage enumeration value; false otherwise.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.VertexChannelNames.Weights">
             <summary>
             Gets the name of the primary animation weights channel.
             This will typically contain data on the bone weights for a vertex channel. For more information, see BoneWeightCollection.
             </summary>
             <returns>Name of the primary animation weights channel.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.VertexChannelNames.Weights(System.Int32)">
             <summary>
             Gets the name of an animation weights channel at the specified index.
             This will typically contain data on the bone weights for a vertex channel. For more information, see BoneWeightCollection.
             </summary>
             <param name="usageIndex">Index of the animation weight channel to be retrieved.</param>
             <returns>Name of the retrieved animation weights channel.</returns>
            </member>
        <member name="T:Microsoft.Xna.Framework.Content.Pipeline.Graphics.VertexContent">
             <summary>
             Provides methods and properties for maintaining the vertex data of a GeometryContent.
             </summary>
             <remarks>This class combines a collection of arbitrarily named data channels with a list of position indices that reference the Positions collection of the parent MeshContent.</remarks>
            </member>
        <member name="P:Microsoft.Xna.Framework.Content.Pipeline.Graphics.VertexContent.Channels">
             <summary>
             Gets the list of named vertex data channels in the VertexContent.
             </summary>
             <value>Collection of vertex data channels.</value>
            </member>
        <member name="P:Microsoft.Xna.Framework.Content.Pipeline.Graphics.VertexContent.PositionIndices">
             <summary>
             Gets the list of position indices.
             </summary>
             <value>Position of the position index being retrieved.</value>
             <remarks>This list adds a level of indirection between the actual triangle indices and the Positions member of the parent. This indirection preserves the topological vertex identity in cases where a single vertex position is used by triangles that straddle a discontinuity in some other data channel.
             For example, the following code gets the position of the first vertex of the first triangle in a GeometryContent object:
             parent.Positions[Vertices.PositionIndices[Indices[0]]]</remarks>
            </member>
        <member name="P:Microsoft.Xna.Framework.Content.Pipeline.Graphics.VertexContent.Positions">
             <summary>
             Gets position data from the parent mesh object.
             </summary>
             <value>Collection of vertex positions for the mesh.</value>
             <remarks>The collection returned from this call provides a virtualized view of the vertex positions for this batch. The collection uses the contents of the PositionIndices property to index into the parent Positions. This collection is read-only. If you need to modify any contained values, edit the PositionIndices or Positions members directly.</remarks>
            </member>
        <member name="P:Microsoft.Xna.Framework.Content.Pipeline.Graphics.VertexContent.VertexCount">
             <summary>
             Number of vertices for the content.
             </summary>
             <value>Number of vertices.</value>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.VertexContent.#ctor(Microsoft.Xna.Framework.Content.Pipeline.Graphics.GeometryContent)">
             <summary>
             Constructs a VertexContent instance.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.VertexContent.Add(System.Int32)">
             <summary>
             Appends a new vertex index to the end of the PositionIndices collection.
             Other vertex channels will automatically be extended and the new indices populated with default values.
             </summary>
             <param name="positionIndex">Index into the MeshContent.Positions member of the parent.</param>
             <returns>Index of the new entry. This can be added to the Indices member of the parent.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.VertexContent.AddRange(System.Collections.Generic.IEnumerable{System.Int32})">
             <summary>
             Appends multiple vertex indices to the end of the PositionIndices collection.
             Other vertex channels will automatically be extended and the new indices populated with default values.
             </summary>
             <param name="positionIndexCollection">Index into the Positions member of the parent.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.VertexContent.CreateVertexBuffer">
             <summary>
             Converts design-time vertex position and channel data into a vertex buffer format that a graphics device can recognize.
             </summary>
             <returns>A packed vertex buffer.</returns>
             <exception cref="T:Microsoft.Xna.Framework.Content.Pipeline.InvalidContentException">One or more of the vertex channel types are invalid or an unrecognized name was passed to VertexElementUsage.</exception>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.VertexContent.Insert(System.Int32,System.Int32)">
             <summary>
             Inserts a new vertex index to the PositionIndices collection.
             Other vertex channels will automatically be extended and the new indices populated with default values.
             </summary>
             <param name="index">Vertex index to be inserted.</param>
             <param name="positionIndex">Position of new vertex index in the collection.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.VertexContent.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{System.Int32})">
             <summary>
             Inserts multiple vertex indices to the PositionIndices collection.
             Other vertex channels will automatically be extended and the new indices populated with default values.
             </summary>
             <param name="index">Vertex index to be inserted.</param>
             <param name="positionIndexCollection">Position of the first element of the inserted range in the collection.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.VertexContent.RemoveAt(System.Int32)">
             <summary>
             Removes a vertex index from the specified location in both PositionIndices and VertexChannel&lt;T&gt;.
             </summary>
             <param name="index">Index of the vertex to be removed.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.VertexContent.RemoveRange(System.Int32,System.Int32)">
             <summary>
             Removes a range of vertex indices from the specified location in both PositionIndices and VertexChannel&lt;T&gt;.
             </summary>
             <param name="index">Index of the first vertex index to be removed.</param>
             <param name="count">Number of indices to remove.</param>
            </member>
        <member name="T:Microsoft.Xna.Framework.Content.Pipeline.Processors.CompiledEffectContent">
             <summary>
             Represents a compiled Effect.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Processors.CompiledEffectContent.#ctor(System.Byte[])">
             <summary>
             Creates a new instance of the CompiledEffectContent class
             </summary>
             <param name="effectCode">The compiled effect code.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Processors.CompiledEffectContent.GetEffectCode">
             <summary>
             Retrieves the compiled byte code for this shader.
             </summary>
             <returns>The compiled bytecode.</returns>
            </member>
        <member name="T:Microsoft.Xna.Framework.Content.Pipeline.Processors.EffectProcessor">
             <summary>
             Processes a string representation to a platform-specific compiled effect.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Content.Pipeline.Processors.EffectProcessor.DebugMode">
             <summary>
             The debug mode for compiling effects.
             </summary>
             <value>The debug mode to use when compiling effects.</value>
            </member>
        <member name="P:Microsoft.Xna.Framework.Content.Pipeline.Processors.EffectProcessor.Defines">
             <summary>
             Define assignments for the effect.
             </summary>
             <value>A list of define assignments delimited by semicolons.</value>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Processors.EffectProcessor.#ctor">
             <summary>
             Initializes a new instance of EffectProcessor.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Processors.EffectProcessor.Process(Microsoft.Xna.Framework.Content.Pipeline.Graphics.EffectContent,Microsoft.Xna.Framework.Content.Pipeline.ContentProcessorContext)">
             <summary>
             Processes the string representation of the specified effect into a platform-specific binary format using the specified context.
             </summary>
             <param name="input">The effect string to be processed.</param>
             <param name="context">Context for the specified processor.</param>
             <returns>A platform-specific compiled binary effect.</returns>
             <remarks>If you get an error during processing, compilation stops immediately. The effect processor displays an error message. Once you fix the current error, it is possible you may get more errors on subsequent compilation attempts.</remarks>
            </member>
        <member name="T:Microsoft.Xna.Framework.Content.Pipeline.Processors.EffectProcessorDebugMode">
             <summary>
             Specifies how debugging of effects is to be supported in PIX.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Content.Pipeline.Processors.EffectProcessorDebugMode.Auto">
             <summary>
             Enables effect debugging when built with Debug profile.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Content.Pipeline.Processors.EffectProcessorDebugMode.Debug">
             <summary>
             Enables effect debugging for all profiles. Will produce unoptimized shaders.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Content.Pipeline.Processors.EffectProcessorDebugMode.Optimize">
             <summary>
             Disables debugging for all profiles, produce optimized shaders.
             </summary>
            </member>
        <member name="T:Microsoft.Xna.Framework.Content.Pipeline.Processors.MaterialProcessor">
             <summary>
             Provides methods and properties for maintaining a collection of named texture references.
             </summary>
             <remarks>In addition to texture references, opaque data values are stored in the OpaqueData property of the base class.</remarks>
            </member>
        <member name="P:Microsoft.Xna.Framework.Content.Pipeline.Processors.MaterialProcessor.ColorKeyColor">
             <summary>
             Gets or sets the color value to replace with transparent black.
             </summary>
             <value>Color value of the material to replace with transparent black.</value>
            </member>
        <member name="P:Microsoft.Xna.Framework.Content.Pipeline.Processors.MaterialProcessor.ColorKeyEnabled">
             <summary>
             Specifies whether color keying of a texture is enabled.
             </summary>
             <value>true if color keying is enabled; false otherwise.</value>
            </member>
        <member name="P:Microsoft.Xna.Framework.Content.Pipeline.Processors.MaterialProcessor.DefaultEffect">
             <summary>
             The default effect type for this instance of MaterialProcessor.
             </summary>
             <value>The default effect type.</value>
             <remarks>When MaterialProcessor is instantiated, DefaultEffect is set to default to BasicEffect Class.</remarks>
            </member>
        <member name="P:Microsoft.Xna.Framework.Content.Pipeline.Processors.MaterialProcessor.GenerateMipmaps">
             <summary>
             Specifies if a full chain of mipmaps are generated from the source material. Existing mipmaps of the material are not replaced.
             </summary>
             <value>true if mipmap generation is enabled; false otherwise.</value>
            </member>
        <member name="P:Microsoft.Xna.Framework.Content.Pipeline.Processors.MaterialProcessor.PremultiplyTextureAlpha">
             <summary>
             Specifies whether alpha premultiply of textures is enabled.
             </summary>
             <value>true if alpha premultiply is enabled; false otherwise.</value>
            </member>
        <member name="P:Microsoft.Xna.Framework.Content.Pipeline.Processors.MaterialProcessor.ResizeTexturesToPowerOfTwo">
             <summary>
             Specifies whether resizing of a material is enabled. Typically used to maximize compatability with a graphics card because many graphics cards do not support a material size that is not a power of two. If ResizeTexturesToPowerOfTwo is enabled, the material is resized to the next largest power of two.
             </summary>
             <value>true if resizing is enabled; false otherwise.</value>
            </member>
        <member name="P:Microsoft.Xna.Framework.Content.Pipeline.Processors.MaterialProcessor.TextureFormat">
             <summary>
             Specifies the texture format of output materials. Materials can either be left unchanged from the source asset, converted to a corresponding Color, or compressed using the appropriate DxtCompressed format.
             </summary>
             <value>The texture format of the output.</value>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Processors.MaterialProcessor.#ctor">
             <summary>
             Initializes a new instance of the MaterialProcessor class.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Processors.MaterialProcessor.BuildEffect(Microsoft.Xna.Framework.Content.Pipeline.ExternalReference{Microsoft.Xna.Framework.Content.Pipeline.Graphics.EffectContent},Microsoft.Xna.Framework.Content.Pipeline.ContentProcessorContext)">
             <summary>
             Builds effect content.
             </summary>
             <param name="effect">An external reference to the effect content.</param>
             <param name="context">Context for the specified processor.</param>
             <returns>A platform-specific compiled binary effect.</returns>
             <remarks>If the input to process is of type EffectMaterialContent, this function will be called to request that the EffectContent be built. The EffectProcessor is used to process the EffectContent. Subclasses of MaterialProcessor can override this function to modify the parameters used to build EffectContent. For example, a different version of this function could request a different processor for the EffectContent.</remarks>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Processors.MaterialProcessor.BuildTexture(System.String,Microsoft.Xna.Framework.Content.Pipeline.ExternalReference{Microsoft.Xna.Framework.Content.Pipeline.Graphics.TextureContent},Microsoft.Xna.Framework.Content.Pipeline.ContentProcessorContext)">
             <summary>
             Builds texture content.
             </summary>
             <param name="textureName">The name of the texture. This should correspond to the key used to store the texture in Textures.</param>
             <param name="texture">The asset to build. This should be a member of Textures.</param>
             <param name="context">Context for the specified processor.</param>
             <returns>The built texture content.</returns>
             <remarks>textureName can be used to determine which processor to use. For example, if a texture is being used as a normal map, the user may not want to use the ModelTextureProcessor on it, which compresses textures.</remarks>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Processors.MaterialProcessor.Process(Microsoft.Xna.Framework.Content.Pipeline.Graphics.MaterialContent,Microsoft.Xna.Framework.Content.Pipeline.ContentProcessorContext)">
             <summary>
             Builds the texture and effect content for the material.
             </summary>
             <param name="input">The material content to build.</param>
             <param name="context">Context for the specified processor.</param>
             <returns>The built material.</returns>
             <remarks>If the MaterialContent is of type EffectMaterialContent, a build is requested for Effect, and validation will be performed on the OpaqueData to ensure that all parameters are valid input to SetValue or SetValueTranspose. If the MaterialContent is a BasicMaterialContent, no validation will be performed on OpaqueData. Process requests builds for all textures in Textures, unless the MaterialContent is of type BasicMaterialContent, in which case a build will only be requested for DiffuseColor. The textures in Textures will be ignored.</remarks>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Processors.MaterialProcessor.CreateDefaultMaterial(Microsoft.Xna.Framework.Content.Pipeline.Processors.MaterialProcessorDefaultEffect)">
             <summary>
             Helper method which returns the material for a default effect.
             </summary>
             <returns>A material.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Processors.MaterialProcessor.GetDefaultEffect(Microsoft.Xna.Framework.Content.Pipeline.Graphics.MaterialContent)">
             <summary>
             Helper method which returns the default effect for a material.
             </summary>
             <returns>The default effect.</returns>
            </member>
        <member name="T:Microsoft.Xna.Framework.Content.Pipeline.Processors.MaterialProcessorDefaultEffect">
             <summary>
             Specifies the default effect type.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Content.Pipeline.Processors.MaterialProcessorDefaultEffect.BasicEffect">
             <summary>
             A BasicEffect Class effect.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Content.Pipeline.Processors.MaterialProcessorDefaultEffect.SkinnedEffect">
             <summary>
             A SkinnedEffect Class effect.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Content.Pipeline.Processors.MaterialProcessorDefaultEffect.EnvironmentMapEffect">
             <summary>
             An EnvironmentMapEffect Class effect.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Content.Pipeline.Processors.MaterialProcessorDefaultEffect.DualTextureEffect">
             <summary>
             A DualTextureEffect Class effect.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Content.Pipeline.Processors.MaterialProcessorDefaultEffect.AlphaTestEffect">
             <summary>
             An AlphaTestEffect Class effect.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Processors.ModelEnumerableExtensions.SelectDeep``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``0}})">
             <summary>
             Returns each element of a tree structure in hierarchical order.
             </summary>
             <typeparam name="T">The enumerated type.</typeparam>
             <param name="source">The enumeration to traverse.</param>
             <param name="selector">A function which returns the children of the element.</param>
             <returns>An IEnumerable whose elements are in tree structure heriarchical order.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Processors.ModelEnumerableExtensions.AsEnumerable``1(``0)">
             <summary>
             Returns an enumerable from a single element.
             </summary>
             <typeparam name="T"></typeparam>
             <param name="item"></param>
             <returns></returns>
            </member>
        <member name="T:Microsoft.Xna.Framework.Content.Pipeline.Processors.PassThroughProcessor">
             <summary>
             As the name implies, this processor simply passes data through as-is.
             </summary>
            </member>
        <member name="T:Microsoft.Xna.Framework.Content.Pipeline.Processors.SongContent">
             <summary>
             Represents a processed Song object.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Processors.SongContent.#ctor(System.String,System.TimeSpan)">
             <summary>
             Creates a new instance of the SongContent class
             </summary>
             <param name="fileName">Filename of the song</param>
             <param name="duration">Duration of the song</param>
            </member>
        <member name="T:Microsoft.Xna.Framework.Content.Pipeline.Processors.SongProcessor">
             <summary>
             A custom song processor that processes an intermediate AudioContent type. This type encapsulates the source audio content, producing a Song type that can be used in the game.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Content.Pipeline.Processors.SongProcessor.Quality">
             <summary>
             Gets or sets the target format quality of the audio content.
             </summary>
             <value>The ConversionQuality of this audio data.</value>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Processors.SongProcessor.#ctor">
             <summary>
             Initializes a new instance of SongProcessor.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Processors.SongProcessor.Process(Microsoft.Xna.Framework.Content.Pipeline.Audio.AudioContent,Microsoft.Xna.Framework.Content.Pipeline.ContentProcessorContext)">
             <summary>
             Builds the content for the source audio.
             </summary>
             <param name="input">The audio content to build.</param>
             <param name="context">Context for the specified processor.</param>
             <returns>The built audio.</returns>
            </member>
        <member name="T:Microsoft.Xna.Framework.Content.Pipeline.Processors.SoundEffectContent">
             <summary>
             Represents a processed sound effect.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Processors.SoundEffectContent.#ctor(System.Collections.Generic.IEnumerable{System.Byte},System.Collections.Generic.IEnumerable{System.Byte},System.Int32,System.Int32,System.Int32)">
             <summary>
             Initializes a new instance of the SoundEffectContent class.
             </summary>
             <param name="format">The WAV header.</param>
             <param name="data">The audio waveform data.</param>
             <param name="loopStart">The start of the loop segment (must be block aligned).</param>
             <param name="loopLength">The length of the loop segment (must be block aligned).</param>
             <param name="duration">The duration of the wave file in milliseconds.</param>
            </member>
        <member name="T:Microsoft.Xna.Framework.Content.Pipeline.Processors.SoundEffectProcessor">
             <summary>
             A sound effect processor that processes an intermediate AudioContent type. This type encapsulates the source audio content, producing a SoundEffect type that can be used in the game.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Content.Pipeline.Processors.SoundEffectProcessor.Quality">
             <summary>
             Gets or sets the target format quality of the audio content.
             </summary>
             <value>The ConversionQuality of this audio data.</value>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Processors.SoundEffectProcessor.#ctor">
             <summary>
             Initializes a new instance of SoundEffectProcessor.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Processors.SoundEffectProcessor.Process(Microsoft.Xna.Framework.Content.Pipeline.Audio.AudioContent,Microsoft.Xna.Framework.Content.Pipeline.ContentProcessorContext)">
             <summary>
             Builds the content for the source audio.
             </summary>
             <param name="input">The audio content to build.</param>
             <param name="context">Context for the specified processor.</param>
             <returns>The built audio.</returns>
            </member>
        <member name="T:Microsoft.Xna.Framework.Content.Pipeline.Processors.TextureProcessorOutputFormat">
             <summary>
             Specifies the target output (of type SurfaceFormat) of the texture processor. Used by TextureProcessor.TextureFormat.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Content.Pipeline.Processors.TextureProcessorOutputFormat.Color">
             <summary>
             The SurfaceFormat value, of the input TextureContent object, is converted to Color by the processor. Typically used for 2D graphics and overlays.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Content.Pipeline.Processors.TextureProcessorOutputFormat.DxtCompressed">
             <summary>
             The SurfaceFormat value, of the input TextureContent object, is converted to an appropriate DXT compression by the processor. If the input texture
             contains fractional alpha values, it is converted to DXT5 format (8 bits per texel); otherwise it is converted to DXT1 (4 bits per texel). This
             conversion reduces the resource's size on the graphics card. Typically used for 3D textures such as 3D model textures.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Content.Pipeline.Processors.TextureProcessorOutputFormat.NoChange">
             <summary>
             The SurfaceFormat value, of the input TextureContent object, is not changed by the processor. Typically used for textures processed by an external tool.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Content.Pipeline.Processors.TextureProcessorOutputFormat.Compressed">
             <summary>
             The SurfaceFormat value, of the input TextureContent object, is converted to an appropriate compressed format for the target platform.
             This can include PVRTC for iOS, DXT for desktop, Windows 8 and Windows Phone 8, and ETC1 or BGRA4444 for Android.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Content.Pipeline.Processors.TextureProcessorOutputFormat.Color16Bit">
             <summary>
             The pixel depth of the input texture is reduced to BGR565 for opaque textures, otherwise it uses BGRA4444.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Content.Pipeline.Processors.TextureProcessorOutputFormat.Etc1Compressed">
             <summary>
             The input texture is compressed using ETC1 texture compression.  Used on Android platforms.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Content.Pipeline.Processors.TextureProcessorOutputFormat.PvrCompressed">
             <summary>
             The input texture is compressed using PVR texture compression. Used on iOS and some Android platforms.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Content.Pipeline.Processors.TextureProcessorOutputFormat.AtcCompressed">
             <summary>
             The input texture is compressed using ATI texture compression.  Used on some Android platforms.
             </summary>
            </member>
        <member name="T:Microsoft.Xna.Framework.Content.Pipeline.Processors.VertexBufferContent">
             <summary>
             Provides methods and properties for managing a design-time vertex buffer that holds packed vertex data.
             </summary>
             <remarks>This type directly corresponds to the runtime VertexBuffer class, and when a VertexBufferContent object is passed to the content compiler, the vertex data deserializes directly into a VertexBuffer at runtime. VertexBufferContent objects are not directly created by importers. The preferred method is to store vertex data in the more flexible VertexContent class.</remarks>
            </member>
        <member name="P:Microsoft.Xna.Framework.Content.Pipeline.Processors.VertexBufferContent.VertexData">
             <summary>
             Gets the array containing the raw bytes of the packed vertex data. Use this method to get and set the contents of the vertex buffer.
             </summary>
             <value>Raw data of the packed vertex data.</value>
            </member>
        <member name="P:Microsoft.Xna.Framework.Content.Pipeline.Processors.VertexBufferContent.VertexDeclaration">
             <summary>
             Gets and sets the associated VertexDeclarationContent object.
             </summary>
             <value>The associated VertexDeclarationContent object.</value>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Processors.VertexBufferContent.#ctor">
             <summary>
             Initializes a new instance of VertexBufferContent.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Processors.VertexBufferContent.#ctor(System.Int32)">
             <summary>
             Initializes a new instance of VertexBufferContent of the specified size.
             </summary>
             <param name="size">The size of the vertex buffer content, in bytes.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Processors.VertexBufferContent.SizeOf(System.Type)">
             <summary>
             Gets the size of the specified type, in bytes.
             </summary>
             <param name="type">The type.</param>
             <returns>The size of the specified type, in bytes.</returns>
             <remarks>Call this method to compute offset parameters for the Write method. If the specified 
             data type cannot be packed into a vertex buffer—for example, if type is not a valid value type—a 
             NotSupportedException is thrown.</remarks>
             <exception cref="T:System.NotSupportedException">type is not a valid value type</exception>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Processors.VertexBufferContent.Write``1(System.Int32,System.Int32,System.Collections.Generic.IEnumerable{``0})">
             <summary>
             Writes additional data into the vertex buffer. Writing begins at the specified byte offset, and each value is spaced according to the specified stride value (in bytes).
             </summary>
             <typeparam name="T">Type being written.</typeparam>
             <param name="offset">Offset to begin writing at.</param>
             <param name="stride">Stride of the data being written, in bytes.</param>
             <param name="data">Enumerated collection of data.</param>
             <exception cref="T:System.NotSupportedException">The specified data type cannot be packed into a vertex buffer.</exception>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Processors.VertexBufferContent.Write(System.Int32,System.Int32,System.Type,System.Collections.IEnumerable)">
             <summary>
             Writes additional data into the vertex buffer. Writing begins at the specified byte offset, and each value is spaced according to the specified stride value (in bytes).
             </summary>
             <param name="offset">Offset at which to begin writing.</param>
             <param name="stride">Stride of the data being written, in bytes.</param>
             <param name="dataType">The type of data to be written.</param>
             <param name="data">The data to write.</param>
             <exception cref="T:System.NotSupportedException">The specified data type cannot be packed into a vertex buffer.</exception>
            </member>
        <member name="T:Microsoft.Xna.Framework.Content.Pipeline.Processors.VertexDeclarationContent">
             <summary>
             Provides methods and properties for maintaining the vertex declaration data of a VertexContent.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Content.Pipeline.Processors.VertexDeclarationContent.VertexElements">
             <summary>
             Gets the VertexElement object of the vertex declaration.
             </summary>
             <value>The VertexElement object of the vertex declaration.</value>
            </member>
        <member name="P:Microsoft.Xna.Framework.Content.Pipeline.Processors.VertexDeclarationContent.VertexStride">
             <summary>
             The number of bytes from one vertex to the next.
             </summary>
             <value>The stride (in bytes).</value>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Processors.VertexDeclarationContent.#ctor">
             <summary>
             Initializes a new instance of VertexDeclarationContent.
             </summary>
            </member>
        <member name="T:Microsoft.Xna.Framework.Content.Pipeline.Serialization.Compiler.ArrayWriter`1">
             <summary>
             Writes the array value to the output.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Serialization.Compiler.ArrayWriter`1.OnAddedToContentWriter(Microsoft.Xna.Framework.Content.Pipeline.Serialization.Compiler.ContentWriter)">
             <inheritdoc />
            </member>
        <member name="T:Microsoft.Xna.Framework.Content.Pipeline.Serialization.Compiler.BooleanWriter">
             <summary>
             Writes the boolean value to the output.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Serialization.Compiler.BooleanWriter.Write(Microsoft.Xna.Framework.Content.Pipeline.Serialization.Compiler.ContentWriter,System.Boolean)">
             <summary>
             Writes the value to the output.
             </summary>
             <param name="output">The output writer object.</param>
             <param name="value">The value to write to the output.</param>
            </member>
        <member name="T:Microsoft.Xna.Framework.Content.Pipeline.Serialization.Compiler.BoundingBoxWriter">
             <summary>
             Writes the BoundingBox value to the output.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Serialization.Compiler.BoundingBoxWriter.Write(Microsoft.Xna.Framework.Content.Pipeline.Serialization.Compiler.ContentWriter,Microsoft.Xna.Framework.BoundingBox)">
             <summary>
             Writes the value to the output.
             </summary>
             <param name="output">The output writer object.</param>
             <param name="value">The value to write to the output.</param>
            </member>
        <member name="T:Microsoft.Xna.Framework.Content.Pipeline.Serialization.Compiler.BoundingFrustumWriter">
             <summary>
             Writes the BoundingFrustum value to the output.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Serialization.Compiler.BoundingFrustumWriter.Write(Microsoft.Xna.Framework.Content.Pipeline.Serialization.Compiler.ContentWriter,Microsoft.Xna.Framework.BoundingFrustum)">
             <summary>
             Writes the value to the output.
             </summary>
             <param name="output">The output writer object.</param>
             <param name="value">The value to write to the output.</param>
            </member>
        <member name="T:Microsoft.Xna.Framework.Content.Pipeline.Serialization.Compiler.BoundingSphereWriter">
             <summary>
             Writes the BoundingSphere value to the output.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Serialization.Compiler.BoundingSphereWriter.Write(Microsoft.Xna.Framework.Content.Pipeline.Serialization.Compiler.ContentWriter,Microsoft.Xna.Framework.BoundingSphere)">
             <summary>
             Writes the value to the output.
             </summary>
             <param name="output">The output writer object.</param>
             <param name="value">The value to write to the output.</param>
            </member>
        <member name="T:Microsoft.Xna.Framework.Content.Pipeline.Serialization.Compiler.BuiltInContentWriter`1">
             <summary>
             Base class for the built-in content type writers where the content type is the same as the runtime type.
             </summary>
             <typeparam name="T">The content type being written.</typeparam>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Serialization.Compiler.BuiltInContentWriter`1.OnAddedToContentWriter(Microsoft.Xna.Framework.Content.Pipeline.Serialization.Compiler.ContentWriter)">
             <inheritdoc />
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Serialization.Compiler.BuiltInContentWriter`1.Write(Microsoft.Xna.Framework.Content.Pipeline.Serialization.Compiler.ContentWriter,`0)">
             <summary>
             Writes the value to the output.
             </summary>
             <param name="output">The output writer object.</param>
             <param name="value">The value to write to the output.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Serialization.Compiler.BuiltInContentWriter`1.GetRuntimeReader(Microsoft.Xna.Framework.Content.Pipeline.TargetPlatform)">
             <summary>
             Gets the assembly qualified name of the runtime loader for this type.
             </summary>
             <param name="targetPlatform">Name of the platform.</param>
             <returns>Name of the runtime loader.</returns>
            </member>
        <member name="T:Microsoft.Xna.Framework.Content.Pipeline.Serialization.Compiler.ByteWriter">
             <summary>
             Writes the unsigned byte value to the output.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Serialization.Compiler.ByteWriter.Write(Microsoft.Xna.Framework.Content.Pipeline.Serialization.Compiler.ContentWriter,System.Byte)">
             <summary>
             Writes the value to the output.
             </summary>
             <param name="output">The output writer object.</param>
             <param name="value">The value to write to the output.</param>
            </member>
        <member name="T:Microsoft.Xna.Framework.Content.Pipeline.Serialization.Compiler.CharWriter">
             <summary>
             Writes the character value to the output.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Serialization.Compiler.CharWriter.Write(Microsoft.Xna.Framework.Content.Pipeline.Serialization.Compiler.ContentWriter,System.Char)">
             <summary>
             Writes the value to the output.
             </summary>
             <param name="output">The output writer object.</param>
             <param name="value">The value to write to the output.</param>
            </member>
        <member name="T:Microsoft.Xna.Framework.Content.Pipeline.Serialization.Compiler.ColorWriter">
             <summary>
             Writes the Color value to the output.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Serialization.Compiler.ColorWriter.Write(Microsoft.Xna.Framework.Content.Pipeline.Serialization.Compiler.ContentWriter,Microsoft.Xna.Framework.Color)">
             <summary>
             Writes the value to the output.
             </summary>
             <param name="output">The output writer object.</param>
             <param name="value">The value to write to the output.</param>
            </member>
        <member name="T:Microsoft.Xna.Framework.Content.Pipeline.Serialization.Compiler.ContentCompiler">
             <summary>
             Provides methods for writing compiled binary format.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Serialization.Compiler.ContentCompiler.#ctor">
             <summary>
             Initializes a new instance of ContentCompiler.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Serialization.Compiler.ContentCompiler.GetTypeWriters">
             <summary>
             Iterates through all loaded assemblies and finds the content type writers.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Serialization.Compiler.ContentCompiler.GetTypeWriter(System.Type)">
             <summary>
             Retrieves the worker writer for the specified type.
             </summary>
             <param name="type">The type.</param>
             <returns>The worker writer.</returns>
             <remarks>This should be called from the ContentTypeWriter.Initialize method.</remarks>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Serialization.Compiler.ContentCompiler.Compile(System.IO.Stream,System.Object,Microsoft.Xna.Framework.Content.Pipeline.TargetPlatform,Microsoft.Xna.Framework.Graphics.GraphicsProfile,System.Boolean,System.String,System.String)">
             <summary>
             Write the content to a XNB file.
             </summary>
             <param name="stream">The stream to write the XNB file to.</param>
             <param name="content">The content to write to the XNB file.</param>
             <param name="targetPlatform">The platform the XNB is intended for.</param>
             <param name="targetProfile">The graphics profile of the target.</param>
             <param name="compressContent">True if the content should be compressed.</param>
             <param name="rootDirectory">The root directory of the content.</param>
             <param name="referenceRelocationPath">The path of the XNB file, used to calculate relative paths for external references.</param>
            </member>
        <member name="T:Microsoft.Xna.Framework.Content.Pipeline.Serialization.Compiler.ContentTypeWriter">
             <summary>
             Provides methods and properties for compiling a specific managed type into a binary format.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Content.Pipeline.Serialization.Compiler.ContentTypeWriter.CanDeserializeIntoExistingObject">
             <summary>
             Determines if deserialization into an existing object is possible.
             </summary>
             <value>true if the object can be deserialized into; false otherwise.</value>
            </member>
        <member name="P:Microsoft.Xna.Framework.Content.Pipeline.Serialization.Compiler.ContentTypeWriter.TargetType">
             <summary>
             Gets the type handled by this compiler component.
             </summary>
             <value>The type handled by this compiler component.</value>
            </member>
        <member name="P:Microsoft.Xna.Framework.Content.Pipeline.Serialization.Compiler.ContentTypeWriter.TypeVersion">
             <summary>
             Gets a format version number for this type.
             </summary>
             <value>A format version number for this type.</value>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Serialization.Compiler.ContentTypeWriter.#ctor(System.Type)">
             <summary>
             Initializes a new instance of the ContentTypeWriter class.
             </summary>
             <param name="targetType"></param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Serialization.Compiler.ContentTypeWriter.GetRuntimeReader(Microsoft.Xna.Framework.Content.Pipeline.TargetPlatform)">
             <summary>
             Gets the assembly qualified name of the runtime loader for this type.
             </summary>
             <param name="targetPlatform">Name of the platform.</param>
             <returns>Name of the runtime loader.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Serialization.Compiler.ContentTypeWriter.GetRuntimeType(Microsoft.Xna.Framework.Content.Pipeline.TargetPlatform)">
             <summary>
             Gets the assembly qualified name of the runtime target type. The runtime target type often matches the design time type, but may differ.
             </summary>
             <param name="targetPlatform">The target platform.</param>
             <returns>The qualified name.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Serialization.Compiler.ContentTypeWriter.Initialize(Microsoft.Xna.Framework.Content.Pipeline.Serialization.Compiler.ContentCompiler)">
             <summary>
             Retrieves and caches nested type writers and allows for reflection over the target data type. Called by the framework at creation time.
             </summary>
             <param name="compiler">The content compiler.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Serialization.Compiler.ContentTypeWriter.OnAddedToContentWriter(Microsoft.Xna.Framework.Content.Pipeline.Serialization.Compiler.ContentWriter)">
             <summary>
             Allows type writers to add their element type writers to the content writer.
             </summary>
             <param name="writer">The content writer.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Serialization.Compiler.ContentTypeWriter.ShouldCompressContent(Microsoft.Xna.Framework.Content.Pipeline.TargetPlatform,System.Object)">
             <summary>
             Indicates whether a given type of content should be compressed.
             </summary>
             <param name="targetPlatform">The target platform of the content build.</param>
             <param name="value">The object about to be serialized, or null if a collection of objects is to be serialized.</param>
             <returns>true if the content of the requested type should be compressed; false otherwise.</returns>
             <remarks>This base class implementation of this method always returns true. It should be overridden
             to return false if there would be little or no useful reduction in size of the content type's data
             from a general-purpose lossless compression algorithm.
             The implementations for Song Class and SoundEffect Class data return false because data for these
             content types is already in compressed form.</remarks>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Serialization.Compiler.ContentTypeWriter.Write(Microsoft.Xna.Framework.Content.Pipeline.Serialization.Compiler.ContentWriter,System.Object)">
             <summary>
             Compiles an object into binary format.
             </summary>
             <param name="output">The content writer serializing the value.</param>
             <param name="value">The resultant object.</param>
            </member>
        <member name="T:Microsoft.Xna.Framework.Content.Pipeline.Serialization.Compiler.ContentTypeWriterAttribute">
             <summary>
             Identifies the components of a type writer. Custom content writers must apply this attribute to their class as well as extend the ContentTypeWriter class.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Serialization.Compiler.ContentTypeWriterAttribute.#ctor">
             <summary>
             Initializes a new instance of the ContentTypeWriterAttribute class.
             </summary>
            </member>
        <member name="T:Microsoft.Xna.Framework.Content.Pipeline.Serialization.Compiler.ContentTypeWriter`1">
             <summary>
             Provides a generic implementation of ContentTypeWriter methods and properties for compiling a specific managed type into a binary format.
             </summary>
             <typeparam name="T">The type to write</typeparam>
             <remarks>This is a generic implementation of ContentTypeWriter and, therefore, can handle strongly typed content data.</remarks>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Serialization.Compiler.ContentTypeWriter`1.#ctor">
             <summary>
             Initializes a new instance of the ContentTypeWriter class.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Serialization.Compiler.ContentTypeWriter`1.Write(Microsoft.Xna.Framework.Content.Pipeline.Serialization.Compiler.ContentWriter,System.Object)">
             <summary>
             Compiles a strongly typed object into binary format.
             </summary>
             <param name="output">The content writer serializing the value.</param>
             <param name="value">The value to write.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Serialization.Compiler.ContentTypeWriter`1.Write(Microsoft.Xna.Framework.Content.Pipeline.Serialization.Compiler.ContentWriter,`0)">
             <summary>
             Compiles a strongly typed object into binary format.
             </summary>
             <param name="output">The content writer serializing the value.</param>
             <param name="value">The value to write.</param>
            </member>
        <member name="T:Microsoft.Xna.Framework.Content.Pipeline.Serialization.Compiler.ContentWriter">
             <summary>
             Provides an implementation for many of the ContentCompiler methods including compilation, state tracking for shared resources and creation of the header type manifest.
             </summary>
             <remarks>A new ContentWriter is constructed for each compilation operation.</remarks>
            </member>
        <member name="P:Microsoft.Xna.Framework.Content.Pipeline.Serialization.Compiler.ContentWriter.TargetPlatform">
             <summary>
             Gets the content build target platform.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Content.Pipeline.Serialization.Compiler.ContentWriter.TargetProfile">
             <summary>
             Gets or sets the target graphics profile.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Serialization.Compiler.ContentWriter.#ctor(Microsoft.Xna.Framework.Content.Pipeline.Serialization.Compiler.ContentCompiler,System.IO.Stream,Microsoft.Xna.Framework.Content.Pipeline.TargetPlatform,Microsoft.Xna.Framework.Graphics.GraphicsProfile,System.Boolean,System.String,System.String)">
             <summary>
             Creates a new instance of ContentWriter.
             </summary>
             <param name="compiler">The compiler object that created this writer.</param>
             <param name="output">The stream to write the XNB file to.</param>
             <param name="targetPlatform">The platform the XNB is intended for.</param>
             <param name="targetProfile">The graphics profile of the target.</param>
             <param name="compressContent">True if the content should be compressed.</param>
             <param name="rootDirectory">The root directory of the content.</param>
             <param name="referenceRelocationPath">The path of the XNB file, used to calculate relative paths for external references.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Serialization.Compiler.ContentWriter.Dispose(System.Boolean)">
             <summary>
             Releases the resources used by the IDisposable class.
             </summary>
             <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Serialization.Compiler.ContentWriter.Flush">
             <summary>
             All content has been written, so now finalize the header, footer and anything else that needs finalizing.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Serialization.Compiler.ContentWriter.WriteTypeWriters">
             <summary>
             Write the table of content type writers.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Serialization.Compiler.ContentWriter.WriteHeader">
             <summary>
             Write the header to the output stream.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Serialization.Compiler.ContentWriter.WriteSharedResources">
             <summary>
             Write all shared resources at the end of the file.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Serialization.Compiler.ContentWriter.WriteCompressedStream(System.IO.MemoryStream)">
             <summary>
             Compress the stream and write it to the output.
             </summary>
             <param name="stream">The stream to compress and write to the output.</param>
             <returns>true if the write succeeds</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Serialization.Compiler.ContentWriter.WriteUncompressedStream(System.IO.Stream)">
             <summary>
             Write the uncompressed stream to the output.
             </summary>
             <param name="stream">The stream to write to the output.</param>
             <returns>true if the write succeeds</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Serialization.Compiler.ContentWriter.GetTypeWriter(System.Type)">
             <summary>
             Gets a ContentTypeWriter for the given type.
             </summary>
             <param name="type">The type of the object to write.</param>
             <returns>The ContentTypeWriter for the type.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Serialization.Compiler.ContentWriter.WriteExternalReference``1(Microsoft.Xna.Framework.Content.Pipeline.ExternalReference{``0})">
             <summary>
             Writes the name of an external file to the output binary.
             </summary>
             <typeparam name="T">The type of reference.</typeparam>
             <param name="reference">External reference to a data file for the content item.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Serialization.Compiler.ContentWriter.WriteObject``1(``0)">
             <summary>
             Writes a single object preceded by a type identifier to the output binary.
             </summary>
             <typeparam name="T">The type of value.</typeparam>
             <param name="value">The value to write.</param>
             <remarks>This method can be called recursively with a null value.</remarks>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Serialization.Compiler.ContentWriter.WriteObject``1(``0,Microsoft.Xna.Framework.Content.Pipeline.Serialization.Compiler.ContentTypeWriter)">
             <summary>
             Writes a single object to the output binary, using the specified type hint and writer worker.
             </summary>
             <typeparam name="T">The type of value.</typeparam>
             <param name="value">The value to write.</param>
             <param name="typeWriter">The content type writer.</param>
             <remarks>The type hint should be retrieved from the Initialize method of the ContentTypeWriter
             that is calling WriteObject, by calling GetTypeWriter and passing it the type of the field used
             to hold the value being serialized.
             </remarks>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Serialization.Compiler.ContentWriter.WriteRawObject``1(``0)">
             <summary>
             Writes a single object to the output binary as an instance of the specified type.
             </summary>
             <typeparam name="T">The type of value.</typeparam>
             <param name="value">The value to write.</param>
             <remarks>If you specify a base class of the actual object value only data from this base type
             will be written. This method does not write any type identifier so it cannot support null or
             polymorphic values, and the reader must specify an identical type while loading the compiled data.</remarks>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Serialization.Compiler.ContentWriter.WriteRawObject``1(``0,Microsoft.Xna.Framework.Content.Pipeline.Serialization.Compiler.ContentTypeWriter)">
             <summary>
             Writes a single object to the output binary using the specified writer worker.
             </summary>
             <typeparam name="T">The type of value.</typeparam>
             <param name="value">The value to write.</param>
             <param name="typeWriter">The writer worker. This should be looked up from the Initialize method
             of the ContentTypeWriter that is calling WriteRawObject, by calling GetTypeWriter.</param>
             <remarks>WriteRawObject does not write any type identifier, so it cannot support null or polymorphic
             values, and the reader must specify an identical type while loading the compiled data.</remarks>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Serialization.Compiler.ContentWriter.WriteSharedResource``1(``0)">
             <summary>
             Adds a shared reference to the output binary and records the object to be serialized later.
             </summary>
             <typeparam name="T">The type of value.</typeparam>
             <param name="value">The object to record.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Serialization.Compiler.ContentWriter.Write(Microsoft.Xna.Framework.Color)">
             <summary>
             Writes a Color value.
             </summary>
             <param name="value">Value of a color using Red, Green, Blue, and Alpha values to write.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Serialization.Compiler.ContentWriter.Write(Microsoft.Xna.Framework.Matrix)">
             <summary>
             Writes a Matrix value.
             </summary>
             <param name="value">Value to write.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Serialization.Compiler.ContentWriter.Write(Microsoft.Xna.Framework.Quaternion)">
             <summary>
             Writes a Matrix value.
             </summary>
             <param name="value">Value to write.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Serialization.Compiler.ContentWriter.Write(Microsoft.Xna.Framework.Vector2)">
             <summary>
             Writes a Vector2 value.
             </summary>
             <param name="value">Value to write.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Serialization.Compiler.ContentWriter.Write(Microsoft.Xna.Framework.Vector3)">
             <summary>
             Writes a Vector3 value.
             </summary>
             <param name="value">Value to write.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Serialization.Compiler.ContentWriter.Write(Microsoft.Xna.Framework.Vector4)">
             <summary>
             Writes a Vector4 value.
             </summary>
             <param name="value">Value to write.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Serialization.Compiler.ContentWriter.Write(Microsoft.Xna.Framework.BoundingSphere)">
             <summary>
             Writes a BoundingSphere value.
             </summary>
             <param name="value">Value to write.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Serialization.Compiler.ContentWriter.Write(Microsoft.Xna.Framework.Rectangle)">
             <summary>
             Writes a Rectangle value.
             </summary>
             <param name="value">Value to write.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Serialization.Compiler.ContentWriter.CanDeserializeIntoExistingObject(System.Type)">
             <summary>
             Helper for checking if a type can be deserialized into an existing object.
             </summary>
             <param name="type">The type to check.</param>
             <returns>True if the type can be deserialized into an existing object.</returns>
            </member>
        <member name="T:Microsoft.Xna.Framework.Content.Pipeline.Serialization.Compiler.CurveWriter">
             <summary>
             Writes the Curve value to the output.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Serialization.Compiler.CurveWriter.Write(Microsoft.Xna.Framework.Content.Pipeline.Serialization.Compiler.ContentWriter,Microsoft.Xna.Framework.Curve)">
             <summary>
             Writes the value to the output.
             </summary>
             <param name="output">The output writer object.</param>
             <param name="value">The value to write to the output.</param>
            </member>
        <member name="T:Microsoft.Xna.Framework.Content.Pipeline.Serialization.Compiler.DateTimeWriter">
             <summary>
             Writes the DateTime value to the output.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Serialization.Compiler.DateTimeWriter.Write(Microsoft.Xna.Framework.Content.Pipeline.Serialization.Compiler.ContentWriter,System.DateTime)">
             <summary>
             Writes the value to the output.
             </summary>
             <param name="output">The output writer object.</param>
             <param name="value">The value to write to the output.</param>
            </member>
        <member name="T:Microsoft.Xna.Framework.Content.Pipeline.Serialization.Compiler.DecimalWriter">
             <summary>
             Writes the decimal value to the output.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Serialization.Compiler.DecimalWriter.Write(Microsoft.Xna.Framework.Content.Pipeline.Serialization.Compiler.ContentWriter,System.Decimal)">
             <summary>
             Writes the value to the output.
             </summary>
             <param name="output">The output writer object.</param>
             <param name="value">The value to write to the output.</param>
            </member>
        <member name="T:Microsoft.Xna.Framework.Content.Pipeline.Serialization.Compiler.DictionaryWriter`2">
             <summary>
             Writes the dictionary to the output.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Serialization.Compiler.DictionaryWriter`2.OnAddedToContentWriter(Microsoft.Xna.Framework.Content.Pipeline.Serialization.Compiler.ContentWriter)">
             <inheritdoc />
            </member>
        <member name="T:Microsoft.Xna.Framework.Content.Pipeline.Serialization.Compiler.DoubleWriter">
             <summary>
             Writes the double precision floating point value to the output.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Serialization.Compiler.DoubleWriter.Write(Microsoft.Xna.Framework.Content.Pipeline.Serialization.Compiler.ContentWriter,System.Double)">
             <summary>
             Writes the value to the output.
             </summary>
             <param name="output">The output writer object.</param>
             <param name="value">The value to write to the output.</param>
            </member>
        <member name="T:Microsoft.Xna.Framework.Content.Pipeline.Serialization.Compiler.EnumWriter`1">
             <summary>
             Writes the enum value to the output. Usually 32 bit, but can be other sizes if T is not integer.
             </summary>
             <typeparam name="T">The enum type to write.</typeparam>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Serialization.Compiler.EnumWriter`1.OnAddedToContentWriter(Microsoft.Xna.Framework.Content.Pipeline.Serialization.Compiler.ContentWriter)">
             <inheritdoc />
            </member>
        <member name="T:Microsoft.Xna.Framework.Content.Pipeline.Serialization.Compiler.ExternalReferenceWriter`1">
             <summary>
             Writes the external reference to the output.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Serialization.Compiler.ExternalReferenceWriter`1.OnAddedToContentWriter(Microsoft.Xna.Framework.Content.Pipeline.Serialization.Compiler.ContentWriter)">
             <inheritdoc />
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Serialization.Compiler.ExternalReferenceWriter`1.Write(Microsoft.Xna.Framework.Content.Pipeline.Serialization.Compiler.ContentWriter,Microsoft.Xna.Framework.Content.Pipeline.ExternalReference{`0})">
             <summary>
             Writes the value to the output.
             </summary>
             <param name="output">The output writer object.</param>
             <param name="value">The value to write to the output.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Serialization.Compiler.ExternalReferenceWriter`1.GetRuntimeReader(Microsoft.Xna.Framework.Content.Pipeline.TargetPlatform)">
             <inheritdoc />
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Serialization.Compiler.ExternalReferenceWriter`1.GetRuntimeType(Microsoft.Xna.Framework.Content.Pipeline.TargetPlatform)">
             <inheritdoc />
            </member>
        <member name="T:Microsoft.Xna.Framework.Content.Pipeline.Serialization.Compiler.Int16Writer">
             <summary>
             Writes the signed short value to the output.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Serialization.Compiler.Int16Writer.Write(Microsoft.Xna.Framework.Content.Pipeline.Serialization.Compiler.ContentWriter,System.Int16)">
             <summary>
             Writes the value to the output.
             </summary>
             <param name="output">The output writer object.</param>
             <param name="value">The value to write to the output.</param>
            </member>
        <member name="T:Microsoft.Xna.Framework.Content.Pipeline.Serialization.Compiler.Int32Writer">
             <summary>
             Writes the signed integer value to the output.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Serialization.Compiler.Int32Writer.Write(Microsoft.Xna.Framework.Content.Pipeline.Serialization.Compiler.ContentWriter,System.Int32)">
             <summary>
             Writes the value to the output.
             </summary>
             <param name="output">The output writer object.</param>
             <param name="value">The value to write to the output.</param>
            </member>
        <member name="T:Microsoft.Xna.Framework.Content.Pipeline.Serialization.Compiler.Int64Writer">
             <summary>
             Writes the signed long value to the output.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Serialization.Compiler.Int64Writer.Write(Microsoft.Xna.Framework.Content.Pipeline.Serialization.Compiler.ContentWriter,System.Int64)">
             <summary>
             Writes the value to the output.
             </summary>
             <param name="output">The output writer object.</param>
             <param name="value">The value to write to the output.</param>
            </member>
        <member name="T:Microsoft.Xna.Framework.Content.Pipeline.Serialization.Compiler.ListWriter`1">
             <summary>
             Writes the list to the output.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Serialization.Compiler.ListWriter`1.OnAddedToContentWriter(Microsoft.Xna.Framework.Content.Pipeline.Serialization.Compiler.ContentWriter)">
             <inheritdoc />
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Serialization.Compiler.ListWriter`1.Write(Microsoft.Xna.Framework.Content.Pipeline.Serialization.Compiler.ContentWriter,System.Collections.Generic.List{`0})">
             <summary>
             Writes the value to the output.
             </summary>
             <param name="output">The output writer object.</param>
             <param name="value">The value to write to the output.</param>
            </member>
        <member name="T:Microsoft.Xna.Framework.Content.Pipeline.Serialization.Compiler.MatrixWriter">
             <summary>
             Writes the Matrix value to the output.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Serialization.Compiler.MatrixWriter.Write(Microsoft.Xna.Framework.Content.Pipeline.Serialization.Compiler.ContentWriter,Microsoft.Xna.Framework.Matrix)">
             <summary>
             Writes the value to the output.
             </summary>
             <param name="output">The output writer object.</param>
             <param name="value">The value to write to the output.</param>
            </member>
        <member name="T:Microsoft.Xna.Framework.Content.Pipeline.Serialization.Compiler.NullableWriter`1">
             <summary>
             Writes the nullable value to the output.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Serialization.Compiler.NullableWriter`1.OnAddedToContentWriter(Microsoft.Xna.Framework.Content.Pipeline.Serialization.Compiler.ContentWriter)">
             <inheritdoc />
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Serialization.Compiler.NullableWriter`1.Write(Microsoft.Xna.Framework.Content.Pipeline.Serialization.Compiler.ContentWriter,System.Nullable{`0})">
             <summary>
             Writes the value to the output.
             </summary>
             <param name="output">The output writer object.</param>
             <param name="value">The value to write to the output.</param>
            </member>
        <member name="T:Microsoft.Xna.Framework.Content.Pipeline.Serialization.Compiler.PlaneWriter">
             <summary>
             Writes the Plane value to the output.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Serialization.Compiler.PlaneWriter.Write(Microsoft.Xna.Framework.Content.Pipeline.Serialization.Compiler.ContentWriter,Microsoft.Xna.Framework.Plane)">
             <summary>
             Writes the value to the output.
             </summary>
             <param name="output">The output writer object.</param>
             <param name="value">The value to write to the output.</param>
            </member>
        <member name="T:Microsoft.Xna.Framework.Content.Pipeline.Serialization.Compiler.PointWriter">
             <summary>
             Writes the Point value to the output.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Serialization.Compiler.PointWriter.Write(Microsoft.Xna.Framework.Content.Pipeline.Serialization.Compiler.ContentWriter,Microsoft.Xna.Framework.Point)">
             <summary>
             Writes the value to the output.
             </summary>
             <param name="output">The output writer object.</param>
             <param name="value">The value to write to the output.</param>
            </member>
        <member name="T:Microsoft.Xna.Framework.Content.Pipeline.Serialization.Compiler.QuaternionWriter">
             <summary>
             Writes the Quaternion value to the output.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Serialization.Compiler.QuaternionWriter.Write(Microsoft.Xna.Framework.Content.Pipeline.Serialization.Compiler.ContentWriter,Microsoft.Xna.Framework.Quaternion)">
             <summary>
             Writes the value to the output.
             </summary>
             <param name="output">The output writer object.</param>
             <param name="value">The value to write to the output.</param>
            </member>
        <member name="T:Microsoft.Xna.Framework.Content.Pipeline.Serialization.Compiler.RayWriter">
             <summary>
             Writes the Ray value to the output.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Serialization.Compiler.RayWriter.Write(Microsoft.Xna.Framework.Content.Pipeline.Serialization.Compiler.ContentWriter,Microsoft.Xna.Framework.Ray)">
             <summary>
             Writes the value to the output.
             </summary>
             <param name="output">The output writer object.</param>
             <param name="value">The value to write to the output.</param>
            </member>
        <member name="T:Microsoft.Xna.Framework.Content.Pipeline.Serialization.Compiler.RectangleWriter">
             <summary>
             Writes the Rectangle value to the output.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Serialization.Compiler.RectangleWriter.Write(Microsoft.Xna.Framework.Content.Pipeline.Serialization.Compiler.ContentWriter,Microsoft.Xna.Framework.Rectangle)">
             <summary>
             Writes the value to the output.
             </summary>
             <param name="output">The output writer object.</param>
             <param name="value">The value to write to the output.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Serialization.Compiler.ReflectiveWriter`1.OnAddedToContentWriter(Microsoft.Xna.Framework.Content.Pipeline.Serialization.Compiler.ContentWriter)">
             <inheritdoc />
            </member>
        <member name="T:Microsoft.Xna.Framework.Content.Pipeline.Serialization.Compiler.SByteWriter">
             <summary>
             Writes the signed byte value to the output.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Serialization.Compiler.SByteWriter.Write(Microsoft.Xna.Framework.Content.Pipeline.Serialization.Compiler.ContentWriter,System.SByte)">
             <summary>
             Writes the value to the output.
             </summary>
             <param name="output">The output writer object.</param>
             <param name="value">The value to write to the output.</param>
            </member>
        <member name="T:Microsoft.Xna.Framework.Content.Pipeline.Serialization.Compiler.SingleWriter">
             <summary>
             Writes the single precision floating point value to the output.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Serialization.Compiler.SingleWriter.Write(Microsoft.Xna.Framework.Content.Pipeline.Serialization.Compiler.ContentWriter,System.Single)">
             <summary>
             Writes the value to the output.
             </summary>
             <param name="output">The output writer object.</param>
             <param name="value">The value to write to the output.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Serialization.Compiler.SongWriter.Write(Microsoft.Xna.Framework.Content.Pipeline.Serialization.Compiler.ContentWriter,Microsoft.Xna.Framework.Content.Pipeline.Processors.SongContent)">
             <summary>
             Writes the value to the output.
             </summary>
             <param name="output">The output writer object.</param>
             <param name="value">The value to write to the output.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Serialization.Compiler.SoundEffectWriter.Write(Microsoft.Xna.Framework.Content.Pipeline.Serialization.Compiler.ContentWriter,Microsoft.Xna.Framework.Content.Pipeline.Processors.SoundEffectContent)">
             <summary>
             Writes the value to the output.
             </summary>
             <param name="output">The output writer object.</param>
             <param name="value">The value to write to the output.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Serialization.Compiler.SpriteFontContentWriter.GetRuntimeReader(Microsoft.Xna.Framework.Content.Pipeline.TargetPlatform)">
             <summary>
             Gets the assembly qualified name of the runtime loader for this type.
             </summary>
             <param name="targetPlatform">Name of the platform.</param>
             <returns>Name of the runtime loader.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Serialization.Compiler.SpriteFontContentWriter.GetRuntimeType(Microsoft.Xna.Framework.Content.Pipeline.TargetPlatform)">
             <summary>
             Gets the assembly qualified name of the runtime target type. The runtime target type often matches the design time type, but may differ.
             </summary>
             <param name="targetPlatform">The target platform.</param>
             <returns>The qualified name.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Serialization.Compiler.SpriteFontContentWriter.ShouldCompressContent(Microsoft.Xna.Framework.Content.Pipeline.TargetPlatform,System.Object)">
             <summary>
             Indicates whether a given type of content should be compressed.
             </summary>
             <param name="targetPlatform">The target platform of the content build.</param>
             <param name="value">The object about to be serialized, or null if a collection of objects is to be serialized.</param>
             <returns>true if the content of the requested type should be compressed; false otherwise.</returns>
             <remarks>This base class implementation of this method always returns true. It should be overridden
             to return false if there would be little or no useful reduction in size of the content type's data
             from a general-purpose lossless compression algorithm.
             The implementations for Song Class and SoundEffect Class data return false because data for these
             content types is already in compressed form.</remarks>
            </member>
        <member name="T:Microsoft.Xna.Framework.Content.Pipeline.Serialization.Compiler.StringWriter">
             <summary>
             Writes the string value to the output.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Serialization.Compiler.StringWriter.Write(Microsoft.Xna.Framework.Content.Pipeline.Serialization.Compiler.ContentWriter,System.String)">
             <summary>
             Writes the value to the output.
             </summary>
             <param name="output">The output writer object.</param>
             <param name="value">The value to write to the output.</param>
            </member>
        <member name="T:Microsoft.Xna.Framework.Content.Pipeline.Serialization.Compiler.TimeSpanWriter">
             <summary>
             Writes the TimeSpan value to the output.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Serialization.Compiler.TimeSpanWriter.Write(Microsoft.Xna.Framework.Content.Pipeline.Serialization.Compiler.ContentWriter,System.TimeSpan)">
             <summary>
             Writes the value to the output.
             </summary>
             <param name="output">The output writer object.</param>
             <param name="value">The value to write to the output.</param>
            </member>
        <member name="T:Microsoft.Xna.Framework.Content.Pipeline.Serialization.Compiler.UInt16Writer">
             <summary>
             Writes the unsigned short value to the output.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Serialization.Compiler.UInt16Writer.Write(Microsoft.Xna.Framework.Content.Pipeline.Serialization.Compiler.ContentWriter,System.UInt16)">
             <summary>
             Writes the value to the output.
             </summary>
             <param name="output">The output writer object.</param>
             <param name="value">The value to write to the output.</param>
            </member>
        <member name="T:Microsoft.Xna.Framework.Content.Pipeline.Serialization.Compiler.UInt32Writer">
             <summary>
             Writes the unsigned integer value to the output.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Serialization.Compiler.UInt32Writer.Write(Microsoft.Xna.Framework.Content.Pipeline.Serialization.Compiler.ContentWriter,System.UInt32)">
             <summary>
             Writes the value to the output.
             </summary>
             <param name="output">The output writer object.</param>
             <param name="value">The value to write to the output.</param>
            </member>
        <member name="T:Microsoft.Xna.Framework.Content.Pipeline.Serialization.Compiler.UInt64Writer">
             <summary>
             Writes the unsigned long value to the output.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Serialization.Compiler.UInt64Writer.Write(Microsoft.Xna.Framework.Content.Pipeline.Serialization.Compiler.ContentWriter,System.UInt64)">
             <summary>
             Writes the value to the output.
             </summary>
             <param name="output">The output writer object.</param>
             <param name="value">The value to write to the output.</param>
            </member>
        <member name="T:Microsoft.Xna.Framework.Content.Pipeline.Serialization.Compiler.Vector2Writer">
             <summary>
             Writes the Vector2 value to the output.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Serialization.Compiler.Vector2Writer.Write(Microsoft.Xna.Framework.Content.Pipeline.Serialization.Compiler.ContentWriter,Microsoft.Xna.Framework.Vector2)">
             <summary>
             Writes the value to the output.
             </summary>
             <param name="output">The output writer object.</param>
             <param name="value">The value to write to the output.</param>
            </member>
        <member name="T:Microsoft.Xna.Framework.Content.Pipeline.Serialization.Compiler.Vector3Writer">
             <summary>
             Writes the Vector3 value to the output.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Serialization.Compiler.Vector3Writer.Write(Microsoft.Xna.Framework.Content.Pipeline.Serialization.Compiler.ContentWriter,Microsoft.Xna.Framework.Vector3)">
             <summary>
             Writes the value to the output.
             </summary>
             <param name="output">The output writer object.</param>
             <param name="value">The value to write to the output.</param>
            </member>
        <member name="T:Microsoft.Xna.Framework.Content.Pipeline.Serialization.Compiler.Vector4Writer">
             <summary>
             Writes the Vector4 value to the output.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Serialization.Compiler.Vector4Writer.Write(Microsoft.Xna.Framework.Content.Pipeline.Serialization.Compiler.ContentWriter,Microsoft.Xna.Framework.Vector4)">
             <summary>
             Writes the value to the output.
             </summary>
             <param name="output">The output writer object.</param>
             <param name="value">The value to write to the output.</param>
            </member>
        <member name="T:Microsoft.Xna.Framework.Content.Pipeline.Serialization.Intermediate.ContentTypeSerializerAttribute">
             <summary>
             Used to identify custom ContentTypeSerializer classes. 
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Serialization.Intermediate.ContentTypeSerializerAttribute.#ctor">
             <summary>
             Initializes an instance of the ContentTypeSerializerAttribute.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Serialization.Intermediate.IntermediateReader.ReadTypeName">
             <summary>
             Reads the next type in the 
             </summary>
             <returns></returns>
            </member>
        <member name="F:Microsoft.Xna.Framework.Content.Pipeline.Serialization.Intermediate.IntermediateSerializer._typeAliases">
             <summary>
             According to the examples on Sean Hargreaves' blog, explicit types
             can also specify the type aliases from C#. This maps those names
             to the actual .NET framework types for parsing.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Content.Pipeline.Serialization.Intermediate.IntermediateSerializer._namespaceLookup">
             <summary>
             Maps "ShortName:" -&gt; "My.Namespace.LongName." for type lookups.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Serialization.Intermediate.IntermediateSerializer.CreateNamespaceLookup(System.Xml.XmlReader)">
             <summary>
             Builds a lookup table from a short name to the full namespace.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Serialization.Intermediate.IntermediateSerializer.FindType(System.String)">
             <summary>
             Finds the type in any assembly loaded into the AppDomain.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Serialization.Intermediate.IntermediateSerializer.GetFullTypeName(System.Type)">
             <summary>
             Gets the (potentially) aliased name for any type.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Serialization.Intermediate.IntermediateSerializer.GetTypeName(System.Type)">
             <summary>
             Returns the name of the type, without the namespace.
             For generic types, we add the type parameters in square brackets.
             i.e. List&lt;int&gt; becomes List[int]
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Content.Pipeline.Serialization.Intermediate.NamespaceAliasHelper._namespaceLookupReverse">
             <summary>
             Maps "My.Namespace.LongName" -&gt; "ShortName" for type lookups.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Serialization.Intermediate.NamespaceAliasHelper.GetRelativeNamespace(System.String,System.String)">
             <summary>
             Returns just the portion <paramref name="@namespace" /> relative to <paramref name="namespaceParent" />.
             For example, given namespaceParent=Foo.Bar and @namespace=Foo.Bar.Baz, will return Baz.
             </summary>
            </member>
        <member name="T:Microsoft.Xna.Framework.Content.Pipeline.ChildCollection`2">
             <summary>
             Provides a collection of child objects for a content item.
             
             Links from a child object to its parent are maintained as the collection contents are modified.
             </summary>
             <typeparam name="TParent"></typeparam>
             <typeparam name="TChild"></typeparam>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.ChildCollection`2.#ctor(`0)">
             <summary>
             Creates an instance of ChildCollection.
             </summary>
             <param name="parent">Parent object of the child objects returned in the collection.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.ChildCollection`2.ClearItems">
             <summary>
             Removes all children from the collection.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.ChildCollection`2.GetParent(`1)">
             <summary>
             Gets the parent of a child object.
             </summary>
             <param name="child">The child of the parent being retrieved.</param>
             <returns>The parent of the child object.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.ChildCollection`2.InsertItem(System.Int32,`1)">
             <summary>
             Inserts a child object into the collection at the specified location.
             </summary>
             <param name="index">The position in the collection.</param>
             <param name="item">The child object being inserted.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.ChildCollection`2.RemoveItem(System.Int32)">
             <summary>
             Removes a child object from the collection.
             </summary>
             <param name="index">The index of the item being removed.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.ChildCollection`2.SetItem(System.Int32,`1)">
             <summary>
             Modifies the value of the child object at the specified location.
             </summary>
             <param name="index">The index of the child object being modified.</param>
             <param name="item">The new value for the child object.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.ChildCollection`2.SetParent(`1,`0)">
             <summary>
             Modifies the value of the parent object of the specified child object.
             </summary>
             <param name="child">The child of the parent being modified.</param>
             <param name="parent">The new value for the parent object.</param>
            </member>
        <member name="T:Microsoft.Xna.Framework.Content.Pipeline.ContentBuildLogger">
             <summary>
             Provides methods for reporting informational messages or warnings from content importers and processors.
             Do not use this class to report errors. Instead, report errors by throwing a PipelineException or InvalidContentException.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Content.Pipeline.ContentBuildLogger.LoggerRootDirectory">
             <summary>
             Gets or sets the base reference path used when reporting errors during the content build process.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.ContentBuildLogger.#ctor">
             <summary>
             Initializes a new instance of ContentBuildLogger.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.ContentBuildLogger.GetRelativePath(System.String,System.String)">
             <summary>
             Returns the relative path to the filename from the root directory.
             </summary>
             <param name="filename">The target filename.</param>
             <param name="rootDirectory">The root directory. If not specified, the current directory is used.</param>
             <returns>The relative path.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.ContentBuildLogger.GetCurrentFilename(Microsoft.Xna.Framework.Content.Pipeline.ContentIdentity)">
             <summary>
             Gets the filename currently being processed, for use in warning and error messages.
             </summary>
             <param name="contentIdentity">Identity of a content item. If specified, GetCurrentFilename uses this value to refine the search. If no value is specified, the current PushFile state is used.</param>
             <returns>Name of the file being processed.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.ContentBuildLogger.LogImportantMessage(System.String,System.Object[])">
             <summary>
             Outputs a high-priority status message from a content importer or processor.
             </summary>
             <param name="message">Message being reported.</param>
             <param name="messageArgs">Arguments for the reported message.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.ContentBuildLogger.LogMessage(System.String,System.Object[])">
             <summary>
             Outputs a low priority status message from a content importer or processor.
             </summary>
             <param name="message">Message being reported.</param>
             <param name="messageArgs">Arguments for the reported message.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.ContentBuildLogger.LogWarning(System.String,Microsoft.Xna.Framework.Content.Pipeline.ContentIdentity,System.String,System.Object[])">
             <summary>
             Outputs a warning message from a content importer or processor.
             </summary>
             <param name="helpLink">Link to an existing online help topic containing related information.</param>
             <param name="contentIdentity">Identity of the content item that generated the message.</param>
             <param name="message">Message being reported.</param>
             <param name="messageArgs">Arguments for the reported message.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.ContentBuildLogger.PopFile">
             <summary>
             Outputs a message indicating that a content asset has completed processing.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.ContentBuildLogger.PushFile(System.String)">
             <summary>
             Outputs a message indicating that a content asset has begun processing.
             All logger warnings or error exceptions from this time forward to the next PopFile call refer to this file.
             </summary>
             <param name="filename">Name of the file containing future messages.</param>
            </member>
        <member name="T:Microsoft.Xna.Framework.Content.Pipeline.ContentIdentity">
             <summary>
             Provides properties describing the origin of the game asset, such as the original source file and creation tool. This information is used for error reporting, and by processors that need to determine from what directory the asset was originally loaded.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Content.Pipeline.ContentIdentity.FragmentIdentifier">
             <summary>
             Gets or sets the specific location of the content item within the larger source file.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Content.Pipeline.ContentIdentity.SourceFilename">
             <summary>
             Gets or sets the file name of the asset source.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Content.Pipeline.ContentIdentity.SourceTool">
             <summary>
             Gets or sets the creation tool of the asset.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.ContentIdentity.#ctor">
             <summary>
             Initializes a new instance of ContentIdentity.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.ContentIdentity.#ctor(System.String)">
             <summary>
             Initializes a new instance of ContentIdentity with the specified values.
             </summary>
             <param name="sourceFilename">The absolute path to the file name of the asset source.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.ContentIdentity.#ctor(System.String,System.String)">
             <summary>
             Initializes a new instance of ContentIdentity with the specified values.
             </summary>
             <param name="sourceFilename">The absolute path to the file name of the asset source.</param>
             <param name="sourceTool">The name of the digital content creation (DCC) tool that created the asset.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.ContentIdentity.#ctor(System.String,System.String,System.String)">
             <summary>
             Initializes a new instance of ContentIdentity with the specified values.
             </summary>
             <param name="sourceFilename">The absolute path to the file name of the asset source.</param>
             <param name="sourceTool">The name of the digital content creation (DCC) tool that created the asset.</param>
             <param name="fragmentIdentifier">Specific location of the content item within the larger source file. For example, this could be a line number in the file.</param>
            </member>
        <member name="T:Microsoft.Xna.Framework.Content.Pipeline.ContentImporter`1">
             <summary>
             Implements a file format importer for use with game assets.
             Importers, either provided by the framework or written by a developer, must derive from ContentImporter, as well as being marked with a ContentImporterAttribute.
             An importer should produce results in the standard intermediate object model. If an asset has information not supported by the object model, the importer should output it as opaque data (key/value attributes attached to the relevant object). By following this procedure, a content pipeline can access specialized digital content creation (DCC) tool information, even when that information has not been fully standardized into the official object model.
             You can also design custom importers that accept and import types containing specific third-party extensions to the object model.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.ContentImporter`1.#ctor">
             <summary>
             Initializes a new instance of ContentImporter.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.ContentImporter`1.Import(System.String,Microsoft.Xna.Framework.Content.Pipeline.ContentImporterContext)">
             <summary>
             Called by the framework when importing a game asset. This is the method called by XNA when an asset is to be imported into an object that can be recognized by the Content Pipeline.
             </summary>
             <param name="filename">Name of a game asset file.</param>
             <param name="context">Contains information for importing a game asset, such as a logger interface.</param>
             <returns>Resulting game asset.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.ContentImporter`1.Microsoft#Xna#Framework#Content#Pipeline#IContentImporter#Import(System.String,Microsoft.Xna.Framework.Content.Pipeline.ContentImporterContext)">
             <summary>
             Called by the framework when importing a game asset. This is the method called by XNA when an asset is to be imported into an object that can be recognized by the Content Pipeline.
             </summary>
             <param name="filename">Name of a game asset file.</param>
             <param name="context">Contains information for importing a game asset, such as a logger interface.</param>
             <returns>Resulting game asset.</returns>
            </member>
        <member name="T:Microsoft.Xna.Framework.Content.Pipeline.ContentImporterAttribute">
             <summary>
             Provides properties that identify and provide metadata about the importer, such as supported file extensions and caching information.
             Importers are required to initialize this attribute.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Content.Pipeline.ContentImporterAttribute.CacheImportedData">
             <summary>
             Gets and sets the caching of the content during importation.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Content.Pipeline.ContentImporterAttribute.DefaultProcessor">
             <summary>
             Gets or sets the name of the default processor for content read by this importer.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Content.Pipeline.ContentImporterAttribute.DisplayName">
             <summary>
             Gets or sets the string representing the importer in a user interface. This name is not used by the content pipeline and should not be passed to the BuildAssets task (a custom MSBuild task used by XNA Game Studio). It is used for display purposes only.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Content.Pipeline.ContentImporterAttribute.FileExtensions">
             <summary>
             Gets the supported file name extensions of the importer.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.ContentImporterAttribute.#ctor(System.String)">
             <summary>
             Initializes a new instance of ContentImporterAttribute and sets the file name extension supported by the importer.
             </summary>
             <param name="fileExtension">The list of file name extensions supported by the importer. Prefix each extension with a '.'.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.ContentImporterAttribute.#ctor(System.String[])">
             <summary>
             Initializes a new instance of ContentImporterAttribute and sets the file name extensions supported by the importer.
             </summary>
             <param name="fileExtensions">The list of file name extensions supported by the importer. Prefix each extension with a '.'.</param>
            </member>
        <member name="T:Microsoft.Xna.Framework.Content.Pipeline.ContentImporterContext">
             <summary>
             Provides properties that define logging behavior for the importer.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Content.Pipeline.ContentImporterContext.IntermediateDirectory">
             <summary>
             The absolute path to the root of the build intermediate (object) directory.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Content.Pipeline.ContentImporterContext.Logger">
             <summary>
             Gets the logger for an importer.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Content.Pipeline.ContentImporterContext.OutputDirectory">
             <summary>
             The absolute path to the root of the build output (binaries) directory.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.ContentImporterContext.#ctor">
             <summary>
             Initializes a new instance of ContentImporterContext.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.ContentImporterContext.AddDependency(System.String)">
             <summary>
             Adds a dependency to the specified file. This causes a rebuild of the file, when modified, on subsequent incremental builds.
             </summary>
             <param name="filename">Name of an asset file.</param>
            </member>
        <member name="T:Microsoft.Xna.Framework.Content.Pipeline.ContentItem">
             <summary>
             Provides properties that define various aspects of content stored using the intermediate file format of the XNA Framework.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Content.Pipeline.ContentItem.Identity">
             <summary>
             Gets or sets the identity of the content item.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Content.Pipeline.ContentItem.Name">
             <summary>
             Gets or sets the name of the content item.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Content.Pipeline.ContentItem.OpaqueData">
             <summary>
             Gets the opaque data of the content item.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.ContentItem.#ctor">
             <summary>
             Initializes a new instance of ContentItem.
             </summary>
            </member>
        <member name="T:Microsoft.Xna.Framework.Content.Pipeline.ContentProcessor`2">
             <summary>
             Provides a base class to use when developing custom processor components. All processors must derive from this class.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.ContentProcessor`2.#ctor">
             <summary>
             Initializes a new instance of the ContentProcessor class.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.ContentProcessor`2.Process(`0,Microsoft.Xna.Framework.Content.Pipeline.ContentProcessorContext)">
             <summary>
             Processes the specified input data and returns the result.
             </summary>
             <param name="input">Existing content object being processed.</param>
             <param name="context">Contains any required custom process parameters.</param>
             <returns>A typed object representing the processed input.</returns>
            </member>
        <member name="P:Microsoft.Xna.Framework.Content.Pipeline.ContentProcessor`2.Microsoft#Xna#Framework#Content#Pipeline#IContentProcessor#InputType">
             <summary>
             Gets the expected object type of the input parameter to IContentProcessor.Process.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Content.Pipeline.ContentProcessor`2.Microsoft#Xna#Framework#Content#Pipeline#IContentProcessor#OutputType">
             <summary>
             Gets the object type returned by IContentProcessor.Process.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.ContentProcessor`2.Microsoft#Xna#Framework#Content#Pipeline#IContentProcessor#Process(System.Object,Microsoft.Xna.Framework.Content.Pipeline.ContentProcessorContext)">
             <summary>
             Processes the specified input data and returns the result.
             </summary>
             <param name="input">Existing content object being processed.</param>
             <param name="context">Contains any required custom process parameters.</param>
             <returns>The processed input.</returns>
            </member>
        <member name="T:Microsoft.Xna.Framework.Content.Pipeline.ContentProcessorAttribute">
             <summary>
             Gets any existing content processor components.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Content.Pipeline.ContentProcessorAttribute.DisplayName">
             <summary>
             Gets or sets the string representing the processor in a user interface. This name is not used by the content pipeline and should not be passed to the BuildAssets task (a custom MSBuild task used by XNA Game Studio). It is used for display purposes only.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.ContentProcessorAttribute.#ctor">
             <summary>
             Initializes an instance of ContentProcessorAttribute.
             </summary>
            </member>
        <member name="T:Microsoft.Xna.Framework.Content.Pipeline.ContentProcessorContext">
             <summary>
             Provides access to custom processor parameters, methods for converting member data, and triggering nested builds.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Content.Pipeline.ContentProcessorContext.BuildConfiguration">
             <summary>
             Gets the name of the current content build configuration.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Content.Pipeline.ContentProcessorContext.IntermediateDirectory">
             <summary>
             Gets the path of the directory that will contain any intermediate files generated by the content processor.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Content.Pipeline.ContentProcessorContext.Logger">
             <summary>
             Gets the logger interface used for status messages or warnings.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Content.Pipeline.ContentProcessorContext.OutputDirectory">
             <summary>
             Gets the output path of the content processor.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Content.Pipeline.ContentProcessorContext.OutputFilename">
             <summary>
             Gets the output file name of the content processor.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Content.Pipeline.ContentProcessorContext.Parameters">
             <summary>
             Gets the collection of parameters used by the content processor.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Content.Pipeline.ContentProcessorContext.TargetPlatform">
             <summary>
             Gets the current content build target platform.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Content.Pipeline.ContentProcessorContext.TargetProfile">
             <summary>
             Gets the current content build target profile.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.ContentProcessorContext.#ctor">
             <summary>
             Initializes a new instance of ContentProcessorContext.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.ContentProcessorContext.AddDependency(System.String)">
             <summary>
             Adds a dependency to the specified file. This causes a rebuild of the file, when modified, on subsequent incremental builds.
             </summary>
             <param name="filename">Name of an asset file.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.ContentProcessorContext.AddOutputFile(System.String)">
             <summary>
             Add a file name to the list of related output files maintained by the build item. This allows tracking build items that build multiple output files.
             </summary>
             <param name="filename">The name of the file.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.ContentProcessorContext.BuildAndLoadAsset``2(Microsoft.Xna.Framework.Content.Pipeline.ExternalReference{``0},System.String)">
             <summary>
             Initiates a nested build of the specified asset and then loads the result into memory.
             </summary>
             <typeparam name="TInput">Type of the input.</typeparam>
             <typeparam name="TOutput">Type of the converted output.</typeparam>
             <param name="sourceAsset">Reference to the source asset.</param>
             <param name="processorName">Optional processor for this content.</param>
             <returns>Copy of the final converted content.</returns>
             <remarks>An example of usage would be a mesh processor calling BuildAndLoadAsset to build any associated textures and replace the original .tga file references with an embedded copy of the converted texture.</remarks>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.ContentProcessorContext.BuildAndLoadAsset``2(Microsoft.Xna.Framework.Content.Pipeline.ExternalReference{``0},System.String,Microsoft.Xna.Framework.Content.Pipeline.OpaqueDataDictionary,System.String)">
             <summary>
             Initiates a nested build of the specified asset and then loads the result into memory.
             </summary>
             <typeparam name="TInput">Type of the input.</typeparam>
             <typeparam name="TOutput">Type of the converted output.</typeparam>
             <param name="sourceAsset">Reference to the source asset.</param>
             <param name="processorName">Optional processor for this content.</param>
             <param name="processorParameters">Optional collection of named values available as input to the content processor.</param>
             <param name="importerName">Optional importer for this content.</param>
             <returns>Copy of the final converted content.</returns>
             <remarks>An example of usage would be a mesh processor calling BuildAndLoadAsset to build any associated textures and replace the original .tga file references with an embedded copy of the converted texture.</remarks>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.ContentProcessorContext.BuildAsset``2(Microsoft.Xna.Framework.Content.Pipeline.ExternalReference{``0},System.String)">
             <summary>
             Initiates a nested build of an additional asset.
             </summary>
             <typeparam name="TInput">Type of the input.</typeparam>
             <typeparam name="TOutput">Type of the output.</typeparam>
             <param name="sourceAsset">Reference to the source asset.</param>
             <param name="processorName">Optional processor for this content.</param>
             <returns>Reference to the final compiled content. The build work is not required to complete before returning. Therefore, this file may not be up to date when BuildAsset returns but it will be available for loading by the game at runtime.</returns>
             <remarks>An example of usage for BuildAsset is being called by a mesh processor to request that any related textures used are also built, replacing the original TGA file references with new references to the converted texture files.</remarks>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.ContentProcessorContext.BuildAsset``2(Microsoft.Xna.Framework.Content.Pipeline.ExternalReference{``0},System.String,Microsoft.Xna.Framework.Content.Pipeline.OpaqueDataDictionary,System.String,System.String)">
             <summary>
             Initiates a nested build of an additional asset.
             </summary>
             <typeparam name="TInput">Type of the input.</typeparam>
             <typeparam name="TOutput">Type of the output.</typeparam>
             <param name="sourceAsset">Reference to the source asset.</param>
             <param name="processorName">Optional processor for this content.</param>
             <param name="processorParameters">Optional collection of named values available as input to the content processor.</param>
             <param name="importerName">Optional importer for this content.</param>
             <param name="assetName">Optional name of the final compiled content.</param>
             <returns>Reference to the final compiled content. The build work is not required to complete before returning. Therefore, this file may not be up to date when BuildAsset returns but it will be available for loading by the game at runtime.</returns>
             <remarks>An example of usage for BuildAsset is being called by a mesh processor to request that any related textures used are also built, replacing the original TGA file references with new references to the converted texture files.</remarks>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.ContentProcessorContext.Convert``2(``0,System.String)">
             <summary>
             Converts a content item object using the specified content processor.
             </summary>
             <typeparam name="TInput">Type of the input content.</typeparam>
             <typeparam name="TOutput">Type of the converted output.</typeparam>
             <param name="input">Source content to be converted.</param>
             <param name="processorName">Optional processor for this content.</param>
             <returns>Reference of the final converted content.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.ContentProcessorContext.Convert``2(``0,System.String,Microsoft.Xna.Framework.Content.Pipeline.OpaqueDataDictionary)">
             <summary>
             Converts a content item object using the specified content processor.
             </summary>
             <typeparam name="TInput">Type of the input content.</typeparam>
             <typeparam name="TOutput">Type of the converted output.</typeparam>
             <param name="input">Source content to be converted.</param>
             <param name="processorName">Optional processor for this content.</param>
             <param name="processorParameters">Optional parameters for the processor.</param>
             <returns>Reference of the final converted content.</returns>
            </member>
        <member name="T:Microsoft.Xna.Framework.Content.Pipeline.DdsLoader">
             <summary>
             Loader class for DDS format image files.
             </summary>
            </member>
        <member name="T:Microsoft.Xna.Framework.Content.Pipeline.EffectImporter">
             <summary>
             Provides methods for reading effect (.fx) files for use in the Content Pipeline.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.EffectImporter.#ctor">
             <summary>
             Initializes a new instance of EffectImporter.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.EffectImporter.Import(System.String,Microsoft.Xna.Framework.Content.Pipeline.ContentImporterContext)">
             <summary>
             Called by the XNA Framework when importing an .fx file to be used as a game asset. This is the method called by the XNA Framework when an asset is to be imported into an object that can be recognized by the Content Pipeline.
             </summary>
             <param name="filename">Name of a game asset file.</param>
             <param name="context">Contains information for importing a game asset, such as a logger interface.</param>
             <returns>Resulting game asset.</returns>
            </member>
        <member name="T:Microsoft.Xna.Framework.Content.Pipeline.ExternalReference`1">
             <summary>
             Specifies external references to a data file for the content item.
             
             While the object model is instantiated, reference file names are absolute. When the file containing the external reference is serialized to disk, file names are relative to the file. This allows movement of the content tree to a different location without breaking internal links.
             </summary>
             <typeparam name="T"></typeparam>
            </member>
        <member name="P:Microsoft.Xna.Framework.Content.Pipeline.ExternalReference`1.Filename">
             <summary>
             Gets and sets the file name of an ExternalReference.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.ExternalReference`1.#ctor">
             <summary>
             Initializes a new instance of ExternalReference.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.ExternalReference`1.#ctor(System.String)">
             <summary>
             Initializes a new instance of ExternalReference.
             </summary>
             <param name="filename">The name of the referenced file.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.ExternalReference`1.#ctor(System.String,Microsoft.Xna.Framework.Content.Pipeline.ContentIdentity)">
             <summary>
             Initializes a new instance of ExternalReference, specifying the file path relative to another content item.
             </summary>
             <param name="filename">The name of the referenced file.</param>
             <param name="relativeToContent">The content that the path specified in filename is relative to.</param>
            </member>
        <member name="T:Microsoft.Xna.Framework.Content.Pipeline.ExternalTool">
             <summary>
             Helper to run an external tool installed in the system. Useful for when
             we don't want to package the tool ourselves (ffmpeg) or it's provided
             by a third party (console manufacturer).
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.ExternalTool.FindCommand(System.String)">
             <summary>
             Returns the fully-qualified path for a command, searching the system path if necessary.
             </summary>
             <remarks>
             It's apparently necessary to use the full path when running on some systems.
             </remarks>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.ExternalTool.DeleteFile(System.String)">
             <summary>
             Safely deletes the file if it exists.
             </summary>
             <param name="filePath">The path to the file to delete.</param>
            </member>
        <member name="T:Microsoft.Xna.Framework.Content.Pipeline.FbxImporter">
             <summary>
             Provides methods for reading AutoDesk (.fbx) files for use in the Content Pipeline.
             </summary>
            </member>
        <member name="T:Microsoft.Xna.Framework.Content.Pipeline.FontDescriptionImporter">
             <summary>
             Provides methods for reading .spritefont files for use in the Content Pipeline.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.FontDescriptionImporter.#ctor">
             <summary>
             Initializes a new instance of FontDescriptionImporter.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.FontDescriptionImporter.Import(System.String,Microsoft.Xna.Framework.Content.Pipeline.ContentImporterContext)">
             <summary>
             Called by the XNA Framework when importing a .spritefont file to be used as a game asset. This is the method called by the XNA Framework when an asset is to be imported into an object that can be recognized by the Content Pipeline.
             </summary>
             <param name="filename">Name of a game asset file.</param>
             <param name="context">Contains information for importing a game asset, such as a logger interface.</param>
             <returns>Resulting game asset.</returns>
            </member>
        <member name="T:Microsoft.Xna.Framework.Content.Pipeline.IContentImporter">
             <summary>
             Accesses a statically typed ContentImporter instance from generic code using dynamic typing.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.IContentImporter.Import(System.String,Microsoft.Xna.Framework.Content.Pipeline.ContentImporterContext)">
             <summary>
             Imports an asset from the specified file.
             </summary>
             <param name="filename">Name of the game asset file.</param>
             <param name="context">A ContentImporterContext class containing information for importing a game asset, such as a logger interface.</param>
             <returns>Resulting game asset.</returns>
            </member>
        <member name="T:Microsoft.Xna.Framework.Content.Pipeline.IContentProcessor">
             <summary>
             Provides methods and properties for accessing a statically typed ContentProcessor subclass, using dynamically typed object data.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Content.Pipeline.IContentProcessor.InputType">
             <summary>
             Gets the expected object type of the input parameter to IContentProcessor.Process.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Content.Pipeline.IContentProcessor.OutputType">
             <summary>
             Gets the object type returned by IContentProcessor.Process.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.IContentProcessor.Process(System.Object,Microsoft.Xna.Framework.Content.Pipeline.ContentProcessorContext)">
             <summary>
             Processes the specified input data and returns the result.
             </summary>
             <param name="input">Existing content object being processed.</param>
             <param name="context">Contains any required custom process parameters.</param>
             <returns>An object representing the processed input.</returns>
            </member>
        <member name="T:Microsoft.Xna.Framework.Content.Pipeline.InvalidContentException">
             <summary>
             Thrown when errors are encountered in content during processing.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Content.Pipeline.InvalidContentException.ContentIdentity">
             <summary>
             Gets or sets the identity of the content item that caused the exception.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.InvalidContentException.#ctor">
             <summary>
             Initializes a new instance of the InvalidContentException class
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.InvalidContentException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
             <summary>
             Initializes a new instance of the InvalidContentException class with information on serialization and streaming context for the related content item.
             </summary>
             <param name="serializationInfo">Information necessary for serialization and deserialization of the content item.</param>
             <param name="streamingContext">Information necessary for the source and destination of a given serialized stream. Also provides an additional caller-defined context.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.InvalidContentException.#ctor(System.String)">
             <summary>
             Initializes a new instance of the InvalidContentException class with the specified error message.
             </summary>
             <param name="message">A message that describes the error.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.InvalidContentException.#ctor(System.String,Microsoft.Xna.Framework.Content.Pipeline.ContentIdentity)">
             <summary>
             Initializes a new instance of the InvalidContentException class with the specified error message and the identity of the content throwing the exception.
             </summary>
             <param name="message">A message that describes the error.</param>
             <param name="contentIdentity">Information about the content item that caused this error, including the file name. In some cases, a location within the file (of the problem) is specified.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.InvalidContentException.#ctor(System.String,Microsoft.Xna.Framework.Content.Pipeline.ContentIdentity,System.Exception)">
             <summary>
             Initializes a new instance of the InvalidContentException class with the specified error message, the identity of the content throwing the exception, and a reference to the inner exception that is the cause of this exception.
             </summary>
             <param name="message">A message that describes the error.</param>
             <param name="contentIdentity">Information about the content item that caused this error, including the file name. In some cases, a location within the file (of the problem) is specified.</param>
             <param name="innerException">The exception that is the cause of the current exception. If innerException is not a null reference, the current exception is raised in a catch block that handles the inner exception.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.InvalidContentException.#ctor(System.String,System.Exception)">
             <summary>
             Initializes a new instance of the InvalidContentException class with the specified error message and a reference to the inner exception that is the cause of this exception.
             </summary>
             <param name="message">A message that describes the error.</param>
             <param name="innerException">The exception that is the cause of the current exception. If innerException is not a null reference, the current exception is raised in a catch block that handles the inner exception.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.InvalidContentException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
             <summary>
             When overridden in a derived class, returns information about the exception.
             In addition to the base behavior, this method provides serialization functionality.
             </summary>
             <param name="info">Information necessary for serialization and deserialization of the content item.</param>
             <param name="context">Information necessary for the source and destination of a given serialized stream. Also provides an additional caller-defined context.</param>
            </member>
        <member name="T:Microsoft.Xna.Framework.Content.Pipeline.LoadedTypeCollection`1">
             <summary>
             A helper for collecting instances of a particular type
             by scanning the types in loaded assemblies.
             </summary>
            </member>
        <member name="T:Microsoft.Xna.Framework.Content.Pipeline.Mp3Importer">
             <summary>
             Provides methods for reading MP3 audio files for use in the Content Pipeline.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Mp3Importer.#ctor">
             <summary>
             Initializes a new instance of Mp3Importer.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Mp3Importer.Import(System.String,Microsoft.Xna.Framework.Content.Pipeline.ContentImporterContext)">
             <summary>
             Called by the XNA Framework when importing an MP3 audio file to be used as a game asset. This is the method called by the XNA Framework when an asset is to be imported into an object that can be recognized by the Content Pipeline.
             </summary>
             <param name="filename">Name of a game asset file.</param>
             <param name="context">Contains information for importing a game asset, such as a logger interface.</param>
             <returns>Resulting game asset.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.NamedValueDictionary`1.#ctor">
             <summary>
             Initializes an instance of NamedValueDictionary.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.NamedValueDictionary`1.Add(System.String,`0)">
             <summary>
             Adds the specified key and value to the dictionary.
             </summary>
             <param name="key">Identity of the key of the new data pair.</param>
             <param name="value">The value of the new data pair.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.NamedValueDictionary`1.ContainsKey(System.String)">
             <summary>
             Determines whether the specified key is present in the dictionary.
             </summary>
             <param name="key">Identity of a key.</param>
             <returns></returns>
            </member>
        <member name="P:Microsoft.Xna.Framework.Content.Pipeline.NamedValueDictionary`1.Keys">
             <summary>
             Gets all keys contained in the dictionary.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.NamedValueDictionary`1.Remove(System.String)">
             <summary>
             Removes the specified key and value from the dictionary.
             </summary>
             <param name="key">Identity of the key to be removed.</param>
             <returns>true if the value is present; false otherwise.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.NamedValueDictionary`1.TryGetValue(System.String,`0@)">
             <summary>
             Gets the value associated with the specified key.
             </summary>
             <param name="key">Identity of the key of the element whose value is to be retrieved.</param>
             <param name="value">The current value of the element.</param>
             <returns>true if the value is present; false otherwise.</returns>
            </member>
        <member name="P:Microsoft.Xna.Framework.Content.Pipeline.NamedValueDictionary`1.DefaultSerializerType">
             <summary>
             Specifies the type hint for the intermediate serializer. Values of this type do not store an explicit type attribute in the related XML source.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Content.Pipeline.NamedValueDictionary`1.Values">
             <summary>
             Gets all values contained in the dictionary.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Content.Pipeline.NamedValueDictionary`1.Item(System.String)">
             <summary>
             Gets or sets the specified item.
             </summary>
             <param name="key">Identity of a key.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.NamedValueDictionary`1.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String,T}}#Add(System.Collections.Generic.KeyValuePair{System.String,`0})">
             <summary>
             Adds an item to the collection.
             </summary>
             <param name="item">The item to add to the collection.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.NamedValueDictionary`1.Clear">
             <summary>
             Removes all keys and values from the dictionary.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.NamedValueDictionary`1.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String,T}}#Contains(System.Collections.Generic.KeyValuePair{System.String,`0})">
             <summary>
             Determines whether the collection contains a specific value.
             </summary>
             <param name="item">The object to locate in the collection.</param>
             <returns>true if the collection contains the object; false otherwise.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.NamedValueDictionary`1.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String,T}}#CopyTo(System.Collections.Generic.KeyValuePair{System.String,`0}[],System.Int32)">
             <summary>
             Copies the elements of the collection to an array, starting at a specified index.
             </summary>
             <param name="array">The destination array.</param>
             <param name="arrayIndex">The index at which to begin the copy.</param>
            </member>
        <member name="P:Microsoft.Xna.Framework.Content.Pipeline.NamedValueDictionary`1.Count">
             <summary>
             Gets the number of items in the dictionary.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Content.Pipeline.NamedValueDictionary`1.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String,T}}#IsReadOnly">
             <summary>
             Gets a value indicating if this object is read-only.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.NamedValueDictionary`1.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String,T}}#Remove(System.Collections.Generic.KeyValuePair{System.String,`0})">
             <summary>
             Removes the first occurrence of the specified object from the collection.
             </summary>
             <param name="item">The item to remove from the collection.</param>
             <returns>true if the item was successfully removed from the collection; false otherwise.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.NamedValueDictionary`1.GetEnumerator">
             <summary>
             Gets an enumerator that iterates through items in a dictionary.
             </summary>
             <returns>Enumerator for iterating through the dictionary.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.NamedValueDictionary`1.System#Collections#IEnumerable#GetEnumerator">
             <summary>
             Returns an enumerator that can iterate through this collection.
             </summary>
             <returns>An enumerator that can iterate through this collection</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.NamedValueDictionary`1.AddItem(System.String,`0)">
             <summary>
             Adds an element to the dictionary.
             </summary>
             <param name="key">Identity of the key of the new element.</param>
             <param name="value">The value of the new element.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.NamedValueDictionary`1.ClearItems">
             <summary>
             Removes all elements from the dictionary.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.NamedValueDictionary`1.RemoveItem(System.String)">
             <summary>
             Removes the specified element from the dictionary.
             </summary>
             <param name="key">Identity of the key of the data pair to be removed.</param>
             <returns>true if the value is present; false otherwise.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.NamedValueDictionary`1.SetItem(System.String,`0)">
             <summary>
             Modifies the value of an existing element.
             </summary>
             <param name="key">Identity of the element to be modified.</param>
             <param name="value">The value to be set.</param>
            </member>
        <member name="T:Microsoft.Xna.Framework.Content.Pipeline.OggImporter">
             <summary>
             Provides methods for reading .ogg audio files for use in the Content Pipeline.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.OggImporter.Import(System.String,Microsoft.Xna.Framework.Content.Pipeline.ContentImporterContext)">
             <summary>
             Called by the XNA Framework when importing an ogg audio file to be used as a game asset. This is the method called by the XNA Framework when an asset is to be imported into an object that can be recognized by the Content Pipeline.
             </summary>
             <param name="filename">Name of a game asset file.</param>
             <param name="context">Contains information for importing a game asset, such as a logger interface.</param>
             <returns>Resulting game asset.</returns>
            </member>
        <member name="T:Microsoft.Xna.Framework.Content.Pipeline.OpenAssetImporter.FbxPivot">
             <summary>Defines the frame for local scale/rotation/translation of FBX nodes.</summary>
             <remarks>
             <para>
             The transformation pivot defines the frame for local scale/rotation/translation. The
             local transform of a node is:
             </para>
             <para>
             Local Transform = Translation * RotationOffset * RotationPivot * PreRotation
                               * Rotation * PostRotation * RotationPivotInverse * ScalingOffset
                               * ScalingPivot * Scaling * ScalingPivotInverse
             </para>
             <para>
             where the matrix multiplication order is right-to-left.
             </para>
             <para>
             3ds max uses three additional transformations:
             </para>
             <para>
             Local Transform = Translation * Rotation * Scaling
                               * GeometricTranslation * GeometricRotation * GeometricScaling
             </para>
             <para>
             Transformation pivots are stored per FBX node. When Assimp hits an FBX node with
             a transformation pivot it generates additional nodes named
             </para>
             <para>
               <i>OriginalName</i>_$AssimpFbx$_<i>TransformName</i>
             </para>
             <para>
             where <i>TransformName</i> is one of: 
             </para>
             <para>
               Translation, RotationOffset, RotationPivot, PreRotation, Rotation, PostRotation,
               RotationPivotInverse, ScalingOffset, ScalingPivot, Scaling, ScalingPivotInverse,
               GeometricTranslation, GeometricRotation, GeometricScaling
             </para>
             </remarks>
             <seealso href="http://download.autodesk.com/us/fbx/20112/FBX_SDK_HELP/index.html?url=WS1a9193826455f5ff1f92379812724681e696651.htm,topicNumber=d0e7429" />
             <seealso href="http://area.autodesk.com/forum/autodesk-fbx/fbx-sdk/the-makeup-of-the-local-matrix-of-an-kfbxnode/" />
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.OpenAssetImporter.ImportMaterials">
             <summary>
             Converts all Assimp <see cref="T:Assimp.Material" />s to XNA <see cref="T:Microsoft.Xna.Framework.Content.Pipeline.Graphics.MaterialContent" />s.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.OpenAssetImporter.ImportNodes">
             <summary>
             Converts all Assimp nodes to XNA nodes. (Nodes representing bones are excluded!)
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.OpenAssetImporter.ImportNodes(Assimp.Node,Assimp.Node,Microsoft.Xna.Framework.Content.Pipeline.Graphics.NodeContent)">
             <summary>
             Converts the specified node and all descendant nodes.
             </summary>
             <param name="aiNode">The node.</param>
             <param name="aiParent">The parent node. Can be <see langword="null" />.</param>
             <param name="parent">The <paramref name="aiParent" /> node converted to XNA.</param>
             <returns>The XNA <see cref="T:Microsoft.Xna.Framework.Content.Pipeline.Graphics.NodeContent" />.</returns>
             <remarks>
             It may be necessary to skip certain "preserve pivot" nodes in the hierarchy. The
             converted node needs to be relative to <paramref name="aiParent" />, not <c>node.Parent</c>.
             </remarks>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.OpenAssetImporter.FindSkeleton">
             <summary>
             Identifies the nodes that represent bones and stores the bone offset matrices.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.OpenAssetImporter.FindDeformationBones(Assimp.Scene)">
             <summary>
             Finds the deformation bones (= bones attached to meshes).
             </summary>
             <param name="scene">The scene.</param>
             <returns>A dictionary of all deformation bones and their offset matrices.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.OpenAssetImporter.FindRootBone(Assimp.Scene,System.String)">
             <summary>
             Finds the root bone of a specific bone in the skeleton.
             </summary>
             <param name="scene">The scene.</param>
             <param name="boneName">The name of a bone in the skeleton.</param>
             <returns>The root bone.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.OpenAssetImporter.ImportSkeleton">
             <summary>
             Imports the skeleton including all skeletal animations.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.OpenAssetImporter.ImportBones(Assimp.Node,Assimp.Node,Microsoft.Xna.Framework.Content.Pipeline.Graphics.NodeContent)">
             <summary>
             Converts the specified node and all descendant nodes to XNA bones.
             </summary>
             <param name="aiNode">The node.</param>
             <param name="aiParent">The parent node.</param>
             <param name="parent">The <paramref name="aiParent" /> node converted to XNA.</param>
             <returns>The XNA <see cref="T:Microsoft.Xna.Framework.Content.Pipeline.Graphics.NodeContent" />.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.OpenAssetImporter.ImportAnimation(Assimp.Animation,System.String)">
             <summary>
             Converts the specified animation to XNA.
             </summary>
             <param name="aiAnimation">The animation.</param>
             <param name="nodeName">An optional filter.</param>
             <returns>The animation converted to XNA.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.OpenAssetImporter.GetSubtree(Assimp.Node,System.Collections.Generic.List{Assimp.Node})">
             <summary>
             Copies the current node and all descendant nodes into a list.
             </summary>
             <param name="node">The current node.</param>
             <param name="list">The list.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.OpenAssetImporter.GetRelativeTransform(Assimp.Node,Assimp.Node)">
             <summary>
             Gets the transform of node relative to a specific ancestor node.
             </summary>
             <param name="node">The node.</param>
             <param name="ancestor">The ancestor node. Can be <see langword="null" />.</param>
             <returns>
             The relative transform. If <paramref name="ancestor" /> is <see langword="null" /> the
             absolute transform of <paramref name="node" /> is returned.
             </returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.OpenAssetImporter.GetAnimationName(System.String)">
             <summary>
             Gets the animation name without the "AnimStack::" part.
             </summary>
             <param name="name">The mangled animation name.</param>
             <returns>The original animation name.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.OpenAssetImporter.GetNodeName(System.String)">
             <summary>
             Gets the node name without the "_$AssimpFbx$" part.
             </summary>
             <param name="name">The mangled node name.</param>
             <returns>The original node name.</returns>
            </member>
        <member name="T:Microsoft.Xna.Framework.Content.Pipeline.PipelineComponentScanner">
             <summary>
             Implements a scanner object containing the available importers and processors for an application. Designed for internal use only.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Content.Pipeline.PipelineComponentScanner.Errors">
             <summary>
             Gets the list of error messages produced by the last call to Update.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Content.Pipeline.PipelineComponentScanner.ImporterAttributes">
             <summary>
             Gets a dictionary that maps importer names to their associated metadata attributes.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Content.Pipeline.PipelineComponentScanner.ImporterNames">
             <summary>
             Gets the names of all available importers.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Content.Pipeline.PipelineComponentScanner.ImporterOutputTypes">
             <summary>
             Gets a dictionary that maps importer names to the fully qualified name of their return types.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Content.Pipeline.PipelineComponentScanner.ProcessorAttributes">
             <summary>
             Gets a dictionary that maps processor names to their associated metadata attributes.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Content.Pipeline.PipelineComponentScanner.ProcessorInputTypes">
             <summary>
             Gets a dictionary that maps processor names to the fully qualified name of supported input types.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Content.Pipeline.PipelineComponentScanner.ProcessorNames">
             <summary>
             Gets the names of all available processors.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Content.Pipeline.PipelineComponentScanner.ProcessorOutputTypes">
             <summary>
             Gets a dictionary that maps processor names to the fully qualified name of their output types.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Content.Pipeline.PipelineComponentScanner.ProcessorParameters">
             <summary>
             A collection of supported processor parameters.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.PipelineComponentScanner.#ctor">
             <summary>
             Initializes a new instance of PipelineComponentScanner.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.PipelineComponentScanner.Update(System.Collections.Generic.IEnumerable{System.String})">
             <summary>
             Updates the scanner object with the latest available assembly states.
             </summary>
             <param name="pipelineAssemblies">Enumerated list of available assemblies.</param>
             <returns>true if an actual scan was required, indicating the collection contents may have changed. false if no assembly changes were detected since the previous call.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.PipelineComponentScanner.Update(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String})">
             <summary>
             Updates the scanner object with the latest available assembly states.
             </summary>
             <param name="pipelineAssemblies">Enumerated list of available assemblies.</param>
             <param name="pipelineAssemblyDependencies">Enumerated list of dependent assemblies.</param>
             <returns>true if an actual scan was required, indicating the collection contents may have changed. false if no assembly changes were detected since the previous call.</returns>
            </member>
        <member name="T:Microsoft.Xna.Framework.Content.Pipeline.PipelineException">
             <summary>
             Thrown when errors are encountered during a content pipeline build.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.PipelineException.#ctor">
             <summary>
             Creates an instance of PipelineException.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.PipelineException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
             <summary>
             Creates an instance of PipelineException with information on serialization and streaming context for the related content item.
             </summary>
             <param name="serializationInfo">Information necessary for serialization and deserialization of the content item.</param>
             <param name="streamingContext">Information necessary for the source and destination of a given serialized stream. Also provides an additional caller-defined context.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.PipelineException.#ctor(System.String)">
             <summary>
             Initializes a new instance of the PipelineException class with the specified error message.
             </summary>
             <param name="message">A message that describes the error.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.PipelineException.#ctor(System.String,System.Exception)">
             <summary>
             Initializes a new instance of the PipelineException class with the specified error message and a reference to the inner exception that is the cause of this exception.
             </summary>
             <param name="message">A message that describes the error.</param>
             <param name="innerException">The exception that is the cause of the current exception. If innerException is not a null reference, the current exception is raised in a catch block that handles the inner exception.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.PipelineException.#ctor(System.String,System.Object[])">
             <summary>
             Initializes a new instance of the PipelineException class with the specified error message.
             </summary>
             <param name="message">A message that describes the error.</param>
             <param name="messageArgs">Array of strings specifying message-related arguments.</param>
            </member>
        <member name="T:Microsoft.Xna.Framework.Content.Pipeline.ProcessorParameter">
             <summary>
             Represents a processor parameter. Processor parameters are automatically discovered by the content pipeline. Therefore, only custom processor developers should use this class directly.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Content.Pipeline.ProcessorParameter.DefaultValue">
             <summary>
             Default value of the processor parameter.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Content.Pipeline.ProcessorParameter.Description">
             <summary>
             Description of the parameter, as specified by the [Description] attribute.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Content.Pipeline.ProcessorParameter.DisplayName">
             <summary>
             Name of the parameter displayed in the designer, as specified by the [DisplayName] attribute.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Content.Pipeline.ProcessorParameter.IsEnum">
             <summary>
             Gets a value indicating whether the parameter is an enumeration.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Content.Pipeline.ProcessorParameter.PossibleEnumValues">
             <summary>
             Available options for enumerated type parameters. For parameters of other types, this value is null.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Content.Pipeline.ProcessorParameter.PropertyName">
             <summary>
             Name of the property, as defined in the C# code.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Content.Pipeline.ProcessorParameter.PropertyType">
             <summary>
             Type of the parameter.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.ProcessorParameter.#ctor(System.Reflection.PropertyInfo)">
             <summary>
             Constructs a ProcessorParameter instance.
             </summary>
             <param name="propertyInfo">The info for the property.</param>
            </member>
        <member name="T:Microsoft.Xna.Framework.Content.Pipeline.ProcessorParameterCollection">
             <summary>
             Represents a collection of processor parameters, usually for a single processor. This class is primarily designed for internal use or for custom processor developers.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.ProcessorParameterCollection.#ctor(System.Collections.Generic.IEnumerable{Microsoft.Xna.Framework.Content.Pipeline.ProcessorParameter})">
             <summary>
             Constructs a new ProcessorParameterCollection instance.
             </summary>
             <param name="parameters">The parameters in the collection.</param>
            </member>
        <member name="T:Microsoft.Xna.Framework.Content.Pipeline.TargetPlatform">
             <summary>
             Identifiers for the target platform.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Content.Pipeline.TargetPlatform.Windows">
             <summary>
             All desktop versions of Windows using DirectX.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Content.Pipeline.TargetPlatform.Xbox360">
             <summary>
             Xbox 360 video game and entertainment system
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Content.Pipeline.TargetPlatform.WindowsPhone">
             <summary>
             Windows Phone
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Content.Pipeline.TargetPlatform.iOS">
             <summary>
             Apple iOS-based devices (iPod Touch, iPhone, iPad)
             (MonoGame)
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Content.Pipeline.TargetPlatform.Android">
             <summary>
             Android-based devices
             (MonoGame)
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Content.Pipeline.TargetPlatform.DesktopGL">
             <summary>
             All desktop versions using OpenGL.
             (MonoGame)
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Content.Pipeline.TargetPlatform.MacOSX">
             <summary>
             Apple Mac OSX-based devices (iMac, MacBook, MacBook Air, etc)
             (MonoGame)
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Content.Pipeline.TargetPlatform.WindowsStoreApp">
             <summary>
             Windows Store App
             (MonoGame)
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Content.Pipeline.TargetPlatform.NativeClient">
             <summary>
             Google Chrome Native Client
             (MonoGame)
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Content.Pipeline.TargetPlatform.PlayStationMobile">
             <summary>
             Sony PlayStation Mobile (PS Vita)
             (MonoGame)
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Content.Pipeline.TargetPlatform.WindowsPhone8">
             <summary>
             Windows Phone 8
             (MonoGame)
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Content.Pipeline.TargetPlatform.RaspberryPi">
             <summary>
             Raspberry Pi
             (MonoGame)
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Content.Pipeline.TargetPlatform.PlayStation4">
             <summary>
             Sony PlayStation4
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Content.Pipeline.TargetPlatform.PSVita">
             <summary>
             PlayStation Vita
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Content.Pipeline.TargetPlatform.XboxOne">
             <summary>
             Xbox One
             </summary>
            </member>
        <member name="T:Microsoft.Xna.Framework.Content.Pipeline.TargetPlatformTypeConverter">
             <summary>
             Deserialize legacy Platforms from .MGCB files.
             </summary>
            </member>
        <member name="T:Microsoft.Xna.Framework.Content.Pipeline.TextureImporter">
             <summary>
             Provides methods for reading texture files for use in the Content Pipeline.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.TextureImporter.#ctor">
             <summary>
             Initializes a new instance of TextureImporter.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.TextureImporter.Import(System.String,Microsoft.Xna.Framework.Content.Pipeline.ContentImporterContext)">
             <summary>
             Called by the XNA Framework when importing a texture file to be used as a game asset. This is the method called by the XNA Framework when an asset is to be imported into an object that can be recognized by the Content Pipeline.
             </summary>
             <param name="filename">Name of a game asset file.</param>
             <param name="context">Contains information for importing a game asset, such as a logger interface.</param>
             <returns>Resulting game asset.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.TextureImporter.ConvertAndSwapChannels(FreeImageAPI.FIBITMAP,FreeImageAPI.FREE_IMAGE_TYPE)">
             <summary>
             Expands images to have an alpha channel and swaps red and blue channels
             </summary>
             <param name="fBitmap">Image to process</param>
             <param name="imageType">Type of the image for the procedure</param>
             <returns></returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.TextureImporter.SwitchRedAndBlueChannels(FreeImageAPI.FIBITMAP)">
             <summary>
             Switches the red and blue channels
             </summary>
             <param name="fBitmap">image</param>
            </member>
        <member name="T:Microsoft.Xna.Framework.Content.Pipeline.VideoContent">
             <summary>
             Provides a base class for all video objects.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Content.Pipeline.VideoContent.BitsPerSecond">
             <summary>
             Gets the bit rate for this video.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Content.Pipeline.VideoContent.Duration">
             <summary>
             Gets the duration of this video.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Content.Pipeline.VideoContent.Filename">
             <summary>
             Gets or sets the file name for this video.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Content.Pipeline.VideoContent.FramesPerSecond">
             <summary>
             Gets the frame rate for this video.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Content.Pipeline.VideoContent.Height">
             <summary>
             Gets the height of this video.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Content.Pipeline.VideoContent.VideoSoundtrackType">
             <summary>
             Gets or sets the type of soundtrack accompanying the video.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Content.Pipeline.VideoContent.Width">
             <summary>
             Gets the width of this video.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.VideoContent.#ctor(System.String)">
             <summary>
             Initializes a new copy of the VideoContent class for the specified video file.
             </summary>
             <param name="filename">The file name of the video to import.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.VideoContent.Dispose">
             <summary>
             Immediately releases the unmanaged resources used by this object.
             </summary>
            </member>
        <member name="T:Microsoft.Xna.Framework.Content.Pipeline.WavImporter">
             <summary>
             Provides methods for reading .wav audio files for use in the Content Pipeline.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.WavImporter.Import(System.String,Microsoft.Xna.Framework.Content.Pipeline.ContentImporterContext)">
             <summary>
             Called by the XNA Framework when importing a .wav audio file to be used as a game asset. This is the method called by the XNA Framework when an asset is to be imported into an object that can be recognized by the Content Pipeline.
             </summary>
             <param name="filename">Name of a game asset file.</param>
             <param name="context">Contains information for importing a game asset, such as a logger interface.</param>
             <returns>Resulting game asset.</returns>
             <remarks>This importer only supports 8bit and 16bit depths with sample rates from 8KHz up to 48KHz.</remarks>
            </member>
        <member name="T:Microsoft.Xna.Framework.Content.Pipeline.WmaImporter">
             <summary>
             Provides methods for reading Windows Media Audio (.wma) files for use in the Content Pipeline.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.WmaImporter.#ctor">
             <summary>
             Initializes a new instance of WmaImporter.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.WmaImporter.Import(System.String,Microsoft.Xna.Framework.Content.Pipeline.ContentImporterContext)">
             <summary>
             Called by the XNA Framework when importing a .wma file to be used as a game asset. This is the method called by the XNA Framework when an asset is to be imported into an object that can be recognized by the Content Pipeline.
             </summary>
             <param name="filename">Name of a game asset file.</param>
             <param name="context">Contains information for importing a game asset, such as a logger interface.</param>
             <returns>Resulting game asset.</returns>
            </member>
        <member name="T:Microsoft.Xna.Framework.Content.Pipeline.WmvImporter">
             <summary>
             Provides methods for reading Windows Media Video (.wmv) files for use in the Content Pipeline.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.WmvImporter.#ctor">
             <summary>
             Initializes a new instance of WmvImporter.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.WmvImporter.Import(System.String,Microsoft.Xna.Framework.Content.Pipeline.ContentImporterContext)">
             <summary>
             Called by the XNA Framework when importing a .wmv file to be used as a game asset. This is the method called by the XNA Framework when an asset is to be imported into an object that can be recognized by the Content Pipeline.
             </summary>
             <param name="filename">Name of a game asset file.</param>
             <param name="context">Contains information for importing a game asset, such as a logger interface.</param>
             <returns>Resulting game asset.</returns>
            </member>
        <member name="T:Microsoft.Xna.Framework.Content.Pipeline.XImporter">
             <summary>
             Provides methods for reading DirectX Object (.x) files for use in the Content Pipeline.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.XImporter.#ctor">
             <summary>
             Initializes a new instance of XImporter.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.XImporter.Import(System.String,Microsoft.Xna.Framework.Content.Pipeline.ContentImporterContext)">
             <summary>
             Called by the XNA Framework when importing a .x file to be used as a game asset. This is the method called by the XNA Framework when an asset is to be imported into an object that can be recognized by the Content Pipeline.
             </summary>
             <param name="filename">Name of a game asset file.</param>
             <param name="context">Contains information for importing a game asset, such as a logger interface.</param>
             <returns>Resulting game asset.</returns>
            </member>
        <member name="T:Microsoft.Xna.Framework.Content.Pipeline.XmlImporter">
             <summary>
             Implements an importer for reading intermediate XML files. This is a wrapper around IntermediateSerializer.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.XmlImporter.Import(System.String,Microsoft.Xna.Framework.Content.Pipeline.ContentImporterContext)">
             <summary>
             Called by the XNA Framework when importing an intermediate file to be used as a game 
             asset. This is the method called by the XNA Framework when an asset is to be imported 
             into an object that can be recognized by the Content Pipeline.
             </summary>
             <param name="filename">Name of a game asset file.</param>
             <param name="context">Contains information for importing a game asset, such as a logger interface.</param>
             <returns>The imported game asset.</returns>
            </member>
        <member name="T:Microsoft.Xna.Framework.Content.Pipeline.Utilities.Vector4Converter">
             <summary>
             Helper class used by PixelBitmapContent.TryCopyFrom and TryCopyTo to convert between non-PackedValue types and Vector4.
             </summary>
            </member>
        <member name="T:Microsoft.Xna.Framework.Content.Pipeline.Utilities.LZ4.LZ4Codec">
             <summary>Unsafe LZ4 codec.</summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Content.Pipeline.Utilities.LZ4.LZ4Codec.MEMORY_USAGE">
             <summary>
             Memory usage formula : N-&gt;2^N Bytes (examples : 10 -&gt; 1KB; 12 -&gt; 4KB ; 16 -&gt; 64KB; 20 -&gt; 1MB; etc.)
             Increasing memory usage improves compression ratio
             Reduced memory usage can improve speed, due to cache effect
             Default value is 14, for 16KB, which nicely fits into Intel x86 L1 cache
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Content.Pipeline.Utilities.LZ4.LZ4Codec.NOTCOMPRESSIBLE_DETECTIONLEVEL">
             <summary>
             Decreasing this value will make the algorithm skip faster data segments considered "incompressible"
             This may decrease compression ratio dramatically, but will be faster on incompressible data
             Increasing this value will make the algorithm search more before declaring a segment "incompressible"
             This could improve compression a bit, but will be slower on incompressible data
             The default value (6) is recommended
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Utilities.LZ4.LZ4Codec.MaximumOutputLength(System.Int32)">
             <summary>Gets maximum the length of the output.</summary>
             <param name="inputLength">Length of the input.</param>
             <returns>Maximum number of bytes needed for compressed buffer.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Utilities.LZ4.LZ4Codec.BlockCopy(System.Byte*,System.Byte*,System.Int32)">
             <summary>Copies block of memory.</summary>
             <param name="src">The source.</param>
             <param name="dst">The destination.</param>
             <param name="len">The length (in bytes).</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Utilities.LZ4.LZ4Codec.BlockFill(System.Byte*,System.Int32,System.Byte)">
             <summary>Copies block of memory.</summary>
             <param name="dst">The destination.</param>
             <param name="len">The length (in bytes).</param>
             <param name="val">The value.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Utilities.LZ4.LZ4Codec.Encode32(System.Byte*,System.Byte*,System.Int32,System.Int32)">
             <summary>Encodes the specified input.</summary>
             <param name="input">The input.</param>
             <param name="output">The output.</param>
             <param name="inputLength">Length of the input.</param>
             <param name="outputLength">Length of the output.</param>
             <returns>Number of bytes written.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Utilities.LZ4.LZ4Codec.Encode32(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32)">
             <summary>Encodes the specified input.</summary>
             <param name="input">The input.</param>
             <param name="inputOffset">The input offset.</param>
             <param name="inputLength">Length of the input.</param>
             <param name="output">The output.</param>
             <param name="outputOffset">The output offset.</param>
             <param name="outputLength">Length of the output.</param>
             <returns>Number of bytes written.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Utilities.LZ4.LZ4Codec.Encode32(System.Byte[],System.Int32,System.Int32)">
             <summary>Encodes the specified input.</summary>
             <param name="input">The input.</param>
             <param name="inputOffset">The input offset.</param>
             <param name="inputLength">Length of the input.</param>
             <returns>Compressed buffer.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Utilities.LZ4.LZ4Codec.Decode32(System.Byte*,System.Int32,System.Byte*,System.Int32,System.Boolean)">
             <summary>Decodes the specified input.</summary>
             <param name="input">The input.</param>
             <param name="inputLength">Length of the input.</param>
             <param name="output">The output.</param>
             <param name="outputLength">Length of the output.</param>
             <param name="knownOutputLength">Set it to <c>true</c> if output length is known.</param>
             <returns>Number of bytes written.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Utilities.LZ4.LZ4Codec.Decode32(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32,System.Boolean)">
             <summary>Decodes the specified input.</summary>
             <param name="input">The input.</param>
             <param name="inputOffset">The input offset.</param>
             <param name="inputLength">Length of the input.</param>
             <param name="output">The output.</param>
             <param name="outputOffset">The output offset.</param>
             <param name="outputLength">Length of the output.</param>
             <param name="knownOutputLength">Set it to <c>true</c> if output length is known.</param>
             <returns>Number of bytes written.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Utilities.LZ4.LZ4Codec.Decode32(System.Byte[],System.Int32,System.Int32,System.Int32)">
             <summary>Decodes the specified input.</summary>
             <param name="input">The input.</param>
             <param name="inputOffset">The input offset.</param>
             <param name="inputLength">Length of the input.</param>
             <param name="outputLength">Length of the output.</param>
             <returns>Decompressed buffer.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Utilities.LZ4.LZ4Codec.Encode64(System.Byte*,System.Byte*,System.Int32,System.Int32)">
             <summary>Encodes the specified input.</summary>
             <param name="input">The input.</param>
             <param name="output">The output.</param>
             <param name="inputLength">Length of the input.</param>
             <param name="outputLength">Length of the output.</param>
             <returns>Number of bytes written.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Utilities.LZ4.LZ4Codec.Encode64(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32)">
             <summary>Encodes the specified input.</summary>
             <param name="input">The input.</param>
             <param name="inputOffset">The input offset.</param>
             <param name="inputLength">Length of the input.</param>
             <param name="output">The output.</param>
             <param name="outputOffset">The output offset.</param>
             <param name="outputLength">Length of the output.</param>
             <returns>Number of bytes written.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Utilities.LZ4.LZ4Codec.Encode64(System.Byte[],System.Int32,System.Int32)">
             <summary>Encodes the specified input.</summary>
             <param name="input">The input.</param>
             <param name="inputOffset">The input offset.</param>
             <param name="inputLength">Length of the input.</param>
             <returns>Compressed buffer.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Utilities.LZ4.LZ4Codec.Decode64(System.Byte*,System.Int32,System.Byte*,System.Int32,System.Boolean)">
             <summary>Decodes the specified input.</summary>
             <param name="input">The input.</param>
             <param name="inputLength">Length of the input.</param>
             <param name="output">The output.</param>
             <param name="outputLength">Length of the output.</param>
             <param name="knownOutputLength">Set it to <c>true</c> if output length is known.</param>
             <returns>Number of bytes written.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Utilities.LZ4.LZ4Codec.Decode64(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32,System.Boolean)">
             <summary>Decode64s the specified input.</summary>
             <param name="input">The input.</param>
             <param name="inputOffset">The input offset.</param>
             <param name="inputLength">Length of the input.</param>
             <param name="output">The output.</param>
             <param name="outputOffset">The output offset.</param>
             <param name="outputLength">Length of the output.</param>
             <param name="knownOutputLength">Set it to <c>true</c> if output length is known.</param>
             <returns>Number of bytes written.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Utilities.LZ4.LZ4Codec.Decode64(System.Byte[],System.Int32,System.Int32,System.Int32)">
             <summary>Decode64s the specified input.</summary>
             <param name="input">The input.</param>
             <param name="inputOffset">The input offset.</param>
             <param name="inputLength">Length of the input.</param>
             <param name="outputLength">Length of the output.</param>
             <returns>Decompressed buffer.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Utilities.LZ4.LZ4Codec.Encode32HC(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32)">
             <summary>Encodes the specified input using HC codec.</summary>
             <param name="input">The input.</param>
             <param name="inputOffset">The input offset.</param>
             <param name="inputLength">Length of the input.</param>
             <param name="output">The output.</param>
             <param name="outputOffset">The output offset.</param>
             <param name="outputLength">Length of the output.</param>
             <returns>Number of bytes written. NOTE: when output buffer is too small it returns negative value.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Utilities.LZ4.LZ4Codec.Encode32HC(System.Byte[],System.Int32,System.Int32)">
             <summary>Encodes the specified input using HC codec.</summary>
             <param name="input">The input.</param>
             <param name="inputOffset">The input offset.</param>
             <param name="inputLength">Length of the input.</param>
             <returns>Buffer with compressed data (NOTE: it can be bigger than input).</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Utilities.LZ4.LZ4Codec.Encode64HC(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32)">
             <summary>Encodes the specified input using HC codec.</summary>
             <param name="input">The input.</param>
             <param name="inputOffset">The input offset.</param>
             <param name="inputLength">Length of the input.</param>
             <param name="output">The output.</param>
             <param name="outputOffset">The output offset.</param>
             <param name="outputLength">Length of the output.</param>
             <returns>Number of bytes written. NOTE: when output buffer is too small it returns negative value.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Utilities.LZ4.LZ4Codec.Encode64HC(System.Byte[],System.Int32,System.Int32)">
             <summary>Encodes the specified input using HC codec.</summary>
             <param name="input">The input.</param>
             <param name="inputOffset">The input offset.</param>
             <param name="inputLength">Length of the input.</param>
             <returns>Buffer with compressed data (NOTE: it can be bigger than input).</returns>
            </member>
    </members>
</doc>
